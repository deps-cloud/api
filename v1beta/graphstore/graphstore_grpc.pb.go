// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package graphstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphStoreClient is the client API for GraphStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphStoreClient interface {
	// Used to insert data into the store.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Used to delete data from the store.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Used to list data within the store.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Used to query data within the store.
	Neighbors(ctx context.Context, in *NeighborsRequest, opts ...grpc.CallOption) (*NeighborsResponse, error)
	// Used to navigate the graph.
	Traverse(ctx context.Context, opts ...grpc.CallOption) (GraphStore_TraverseClient, error)
}

type graphStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphStoreClient(cc grpc.ClientConnInterface) GraphStoreClient {
	return &graphStoreClient{cc}
}

func (c *graphStoreClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/graphstore.api.v1beta.GraphStore/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphStoreClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/graphstore.api.v1beta.GraphStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphStoreClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/graphstore.api.v1beta.GraphStore/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphStoreClient) Neighbors(ctx context.Context, in *NeighborsRequest, opts ...grpc.CallOption) (*NeighborsResponse, error) {
	out := new(NeighborsResponse)
	err := c.cc.Invoke(ctx, "/graphstore.api.v1beta.GraphStore/Neighbors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphStoreClient) Traverse(ctx context.Context, opts ...grpc.CallOption) (GraphStore_TraverseClient, error) {
	stream, err := c.cc.NewStream(ctx, &GraphStore_ServiceDesc.Streams[0], "/graphstore.api.v1beta.GraphStore/Traverse", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphStoreTraverseClient{stream}
	return x, nil
}

type GraphStore_TraverseClient interface {
	Send(*TraverseRequest) error
	Recv() (*TraverseResponse, error)
	grpc.ClientStream
}

type graphStoreTraverseClient struct {
	grpc.ClientStream
}

func (x *graphStoreTraverseClient) Send(m *TraverseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *graphStoreTraverseClient) Recv() (*TraverseResponse, error) {
	m := new(TraverseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GraphStoreServer is the server API for GraphStore service.
// All implementations must embed UnimplementedGraphStoreServer
// for forward compatibility
type GraphStoreServer interface {
	// Used to insert data into the store.
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Used to delete data from the store.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Used to list data within the store.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Used to query data within the store.
	Neighbors(context.Context, *NeighborsRequest) (*NeighborsResponse, error)
	// Used to navigate the graph.
	Traverse(GraphStore_TraverseServer) error
	mustEmbedUnimplementedGraphStoreServer()
}

// UnimplementedGraphStoreServer must be embedded to have forward compatible implementations.
type UnimplementedGraphStoreServer struct {
}

func (UnimplementedGraphStoreServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedGraphStoreServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGraphStoreServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGraphStoreServer) Neighbors(context.Context, *NeighborsRequest) (*NeighborsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Neighbors not implemented")
}
func (UnimplementedGraphStoreServer) Traverse(GraphStore_TraverseServer) error {
	return status.Errorf(codes.Unimplemented, "method Traverse not implemented")
}
func (UnimplementedGraphStoreServer) mustEmbedUnimplementedGraphStoreServer() {}

// UnsafeGraphStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphStoreServer will
// result in compilation errors.
type UnsafeGraphStoreServer interface {
	mustEmbedUnimplementedGraphStoreServer()
}

func RegisterGraphStoreServer(s grpc.ServiceRegistrar, srv GraphStoreServer) {
	s.RegisterService(&GraphStore_ServiceDesc, srv)
}

func _GraphStore_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphstore.api.v1beta.GraphStore/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphstore.api.v1beta.GraphStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphStore_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphstore.api.v1beta.GraphStore/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphStore_Neighbors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeighborsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).Neighbors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphstore.api.v1beta.GraphStore/Neighbors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).Neighbors(ctx, req.(*NeighborsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphStore_Traverse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GraphStoreServer).Traverse(&graphStoreTraverseServer{stream})
}

type GraphStore_TraverseServer interface {
	Send(*TraverseResponse) error
	Recv() (*TraverseRequest, error)
	grpc.ServerStream
}

type graphStoreTraverseServer struct {
	grpc.ServerStream
}

func (x *graphStoreTraverseServer) Send(m *TraverseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *graphStoreTraverseServer) Recv() (*TraverseRequest, error) {
	m := new(TraverseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GraphStore_ServiceDesc is the grpc.ServiceDesc for GraphStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graphstore.api.v1beta.GraphStore",
	HandlerType: (*GraphStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _GraphStore_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GraphStore_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GraphStore_List_Handler,
		},
		{
			MethodName: "Neighbors",
			Handler:    _GraphStore_Neighbors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Traverse",
			Handler:       _GraphStore_Traverse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "graphstore/api/v1beta/graphstore.proto",
}
