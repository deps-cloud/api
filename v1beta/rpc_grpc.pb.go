// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error)
	ListModules(ctx context.Context, in *ManagedSource, opts ...grpc.CallOption) (*ListManagedModulesResponse, error)
}

type sourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceServiceClient(cc grpc.ClientConnInterface) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error) {
	out := new(ListSourcesResponse)
	err := c.cc.Invoke(ctx, "/depscloud.api.v1beta.SourceService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) ListModules(ctx context.Context, in *ManagedSource, opts ...grpc.CallOption) (*ListManagedModulesResponse, error) {
	out := new(ListManagedModulesResponse)
	err := c.cc.Invoke(ctx, "/depscloud.api.v1beta.SourceService/ListModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServiceServer is the server API for SourceService service.
// All implementations must embed UnimplementedSourceServiceServer
// for forward compatibility
type SourceServiceServer interface {
	List(context.Context, *ListRequest) (*ListSourcesResponse, error)
	ListModules(context.Context, *ManagedSource) (*ListManagedModulesResponse, error)
	mustEmbedUnimplementedSourceServiceServer()
}

// UnimplementedSourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSourceServiceServer struct {
}

func (UnimplementedSourceServiceServer) List(context.Context, *ListRequest) (*ListSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSourceServiceServer) ListModules(context.Context, *ManagedSource) (*ListManagedModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedSourceServiceServer) mustEmbedUnimplementedSourceServiceServer() {}

// UnsafeSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServiceServer will
// result in compilation errors.
type UnsafeSourceServiceServer interface {
	mustEmbedUnimplementedSourceServiceServer()
}

func RegisterSourceServiceServer(s grpc.ServiceRegistrar, srv SourceServiceServer) {
	s.RegisterService(&SourceService_ServiceDesc, srv)
}

func _SourceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depscloud.api.v1beta.SourceService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depscloud.api.v1beta.SourceService/ListModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).ListModules(ctx, req.(*ManagedSource))
	}
	return interceptor(ctx, in, info, handler)
}

// SourceService_ServiceDesc is the grpc.ServiceDesc for SourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "depscloud.api.v1beta.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SourceService_List_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _SourceService_ListModules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "depscloud/api/v1beta/rpc.proto",
}

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	ListSources(ctx context.Context, in *ManagedModule, opts ...grpc.CallOption) (*ListManagedSourcesResponse, error)
}

type moduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleServiceClient(cc grpc.ClientConnInterface) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, "/depscloud.api.v1beta.ModuleService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListSources(ctx context.Context, in *ManagedModule, opts ...grpc.CallOption) (*ListManagedSourcesResponse, error) {
	out := new(ListManagedSourcesResponse)
	err := c.cc.Invoke(ctx, "/depscloud.api.v1beta.ModuleService/ListSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServiceServer is the server API for ModuleService service.
// All implementations must embed UnimplementedModuleServiceServer
// for forward compatibility
type ModuleServiceServer interface {
	List(context.Context, *ListRequest) (*ListModulesResponse, error)
	ListSources(context.Context, *ManagedModule) (*ListManagedSourcesResponse, error)
	mustEmbedUnimplementedModuleServiceServer()
}

// UnimplementedModuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModuleServiceServer struct {
}

func (UnimplementedModuleServiceServer) List(context.Context, *ListRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedModuleServiceServer) ListSources(context.Context, *ManagedModule) (*ListManagedSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}
func (UnimplementedModuleServiceServer) mustEmbedUnimplementedModuleServiceServer() {}

// UnsafeModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServiceServer will
// result in compilation errors.
type UnsafeModuleServiceServer interface {
	mustEmbedUnimplementedModuleServiceServer()
}

func RegisterModuleServiceServer(s grpc.ServiceRegistrar, srv ModuleServiceServer) {
	s.RegisterService(&ModuleService_ServiceDesc, srv)
}

func _ModuleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depscloud.api.v1beta.ModuleService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depscloud.api.v1beta.ModuleService/ListSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListSources(ctx, req.(*ManagedModule))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleService_ServiceDesc is the grpc.ServiceDesc for ModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "depscloud.api.v1beta.ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ModuleService_List_Handler,
		},
		{
			MethodName: "ListSources",
			Handler:    _ModuleService_ListSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "depscloud/api/v1beta/rpc.proto",
}

// TraversalServiceClient is the client API for TraversalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraversalServiceClient interface {
	GetDependents(ctx context.Context, in *Dependency, opts ...grpc.CallOption) (*DependentsResponse, error)
	GetDependencies(ctx context.Context, in *Dependency, opts ...grpc.CallOption) (*DependenciesResponse, error)
	Search(ctx context.Context, opts ...grpc.CallOption) (TraversalService_SearchClient, error)
	BreadthFirstSearch(ctx context.Context, opts ...grpc.CallOption) (TraversalService_BreadthFirstSearchClient, error)
	DepthFirstSearch(ctx context.Context, opts ...grpc.CallOption) (TraversalService_DepthFirstSearchClient, error)
}

type traversalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTraversalServiceClient(cc grpc.ClientConnInterface) TraversalServiceClient {
	return &traversalServiceClient{cc}
}

func (c *traversalServiceClient) GetDependents(ctx context.Context, in *Dependency, opts ...grpc.CallOption) (*DependentsResponse, error) {
	out := new(DependentsResponse)
	err := c.cc.Invoke(ctx, "/depscloud.api.v1beta.TraversalService/GetDependents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traversalServiceClient) GetDependencies(ctx context.Context, in *Dependency, opts ...grpc.CallOption) (*DependenciesResponse, error) {
	out := new(DependenciesResponse)
	err := c.cc.Invoke(ctx, "/depscloud.api.v1beta.TraversalService/GetDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traversalServiceClient) Search(ctx context.Context, opts ...grpc.CallOption) (TraversalService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &TraversalService_ServiceDesc.Streams[0], "/depscloud.api.v1beta.TraversalService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &traversalServiceSearchClient{stream}
	return x, nil
}

type TraversalService_SearchClient interface {
	Send(*SearchRequest) error
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type traversalServiceSearchClient struct {
	grpc.ClientStream
}

func (x *traversalServiceSearchClient) Send(m *SearchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traversalServiceSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traversalServiceClient) BreadthFirstSearch(ctx context.Context, opts ...grpc.CallOption) (TraversalService_BreadthFirstSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &TraversalService_ServiceDesc.Streams[1], "/depscloud.api.v1beta.TraversalService/BreadthFirstSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &traversalServiceBreadthFirstSearchClient{stream}
	return x, nil
}

type TraversalService_BreadthFirstSearchClient interface {
	Send(*SearchRequest) error
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type traversalServiceBreadthFirstSearchClient struct {
	grpc.ClientStream
}

func (x *traversalServiceBreadthFirstSearchClient) Send(m *SearchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traversalServiceBreadthFirstSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traversalServiceClient) DepthFirstSearch(ctx context.Context, opts ...grpc.CallOption) (TraversalService_DepthFirstSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &TraversalService_ServiceDesc.Streams[2], "/depscloud.api.v1beta.TraversalService/DepthFirstSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &traversalServiceDepthFirstSearchClient{stream}
	return x, nil
}

type TraversalService_DepthFirstSearchClient interface {
	Send(*SearchRequest) error
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type traversalServiceDepthFirstSearchClient struct {
	grpc.ClientStream
}

func (x *traversalServiceDepthFirstSearchClient) Send(m *SearchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traversalServiceDepthFirstSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TraversalServiceServer is the server API for TraversalService service.
// All implementations must embed UnimplementedTraversalServiceServer
// for forward compatibility
type TraversalServiceServer interface {
	GetDependents(context.Context, *Dependency) (*DependentsResponse, error)
	GetDependencies(context.Context, *Dependency) (*DependenciesResponse, error)
	Search(TraversalService_SearchServer) error
	BreadthFirstSearch(TraversalService_BreadthFirstSearchServer) error
	DepthFirstSearch(TraversalService_DepthFirstSearchServer) error
	mustEmbedUnimplementedTraversalServiceServer()
}

// UnimplementedTraversalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTraversalServiceServer struct {
}

func (UnimplementedTraversalServiceServer) GetDependents(context.Context, *Dependency) (*DependentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDependents not implemented")
}
func (UnimplementedTraversalServiceServer) GetDependencies(context.Context, *Dependency) (*DependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDependencies not implemented")
}
func (UnimplementedTraversalServiceServer) Search(TraversalService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedTraversalServiceServer) BreadthFirstSearch(TraversalService_BreadthFirstSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method BreadthFirstSearch not implemented")
}
func (UnimplementedTraversalServiceServer) DepthFirstSearch(TraversalService_DepthFirstSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method DepthFirstSearch not implemented")
}
func (UnimplementedTraversalServiceServer) mustEmbedUnimplementedTraversalServiceServer() {}

// UnsafeTraversalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraversalServiceServer will
// result in compilation errors.
type UnsafeTraversalServiceServer interface {
	mustEmbedUnimplementedTraversalServiceServer()
}

func RegisterTraversalServiceServer(s grpc.ServiceRegistrar, srv TraversalServiceServer) {
	s.RegisterService(&TraversalService_ServiceDesc, srv)
}

func _TraversalService_GetDependents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dependency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraversalServiceServer).GetDependents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depscloud.api.v1beta.TraversalService/GetDependents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraversalServiceServer).GetDependents(ctx, req.(*Dependency))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraversalService_GetDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dependency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraversalServiceServer).GetDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depscloud.api.v1beta.TraversalService/GetDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraversalServiceServer).GetDependencies(ctx, req.(*Dependency))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraversalService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraversalServiceServer).Search(&traversalServiceSearchServer{stream})
}

type TraversalService_SearchServer interface {
	Send(*SearchResponse) error
	Recv() (*SearchRequest, error)
	grpc.ServerStream
}

type traversalServiceSearchServer struct {
	grpc.ServerStream
}

func (x *traversalServiceSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traversalServiceSearchServer) Recv() (*SearchRequest, error) {
	m := new(SearchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TraversalService_BreadthFirstSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraversalServiceServer).BreadthFirstSearch(&traversalServiceBreadthFirstSearchServer{stream})
}

type TraversalService_BreadthFirstSearchServer interface {
	Send(*SearchResponse) error
	Recv() (*SearchRequest, error)
	grpc.ServerStream
}

type traversalServiceBreadthFirstSearchServer struct {
	grpc.ServerStream
}

func (x *traversalServiceBreadthFirstSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traversalServiceBreadthFirstSearchServer) Recv() (*SearchRequest, error) {
	m := new(SearchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TraversalService_DepthFirstSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraversalServiceServer).DepthFirstSearch(&traversalServiceDepthFirstSearchServer{stream})
}

type TraversalService_DepthFirstSearchServer interface {
	Send(*SearchResponse) error
	Recv() (*SearchRequest, error)
	grpc.ServerStream
}

type traversalServiceDepthFirstSearchServer struct {
	grpc.ServerStream
}

func (x *traversalServiceDepthFirstSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traversalServiceDepthFirstSearchServer) Recv() (*SearchRequest, error) {
	m := new(SearchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TraversalService_ServiceDesc is the grpc.ServiceDesc for TraversalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TraversalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "depscloud.api.v1beta.TraversalService",
	HandlerType: (*TraversalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDependents",
			Handler:    _TraversalService_GetDependents_Handler,
		},
		{
			MethodName: "GetDependencies",
			Handler:    _TraversalService_GetDependencies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _TraversalService_Search_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BreadthFirstSearch",
			Handler:       _TraversalService_BreadthFirstSearch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DepthFirstSearch",
			Handler:       _TraversalService_DepthFirstSearch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "depscloud/api/v1beta/rpc.proto",
}
