// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package swagger generated by go-bindata.// sources:
// v1alpha/tracker/tracker.swagger.json
// v1alpha/extractor/extractor.swagger.json
// v1alpha/schema/schema.swagger.json
// v1alpha/deps/deps.swagger.json
// v1alpha/store/store.swagger.json
package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _v1alphaTrackerTrackerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xa4\x36\x10\x7f\xdf\x4f\x61\xd1\x3e\x9e\xb2\x69\xfa\x96\xb7\x53\xaf\x95\x2a\xf5\x5e\x9a\xf4\xa9\x8a\x22\x07\x66\x89\xef\xc0\x76\xec\x21\xed\xf6\xb4\xdf\xbd\x02\x9b\x80\x61\x61\xf9\x9b\x2c\x39\x2c\x9d\x2e\x59\xec\xd9\x19\xcf\xfc\x7e\x33\x63\x9c\x6f\x1b\x42\x3c\xfd\x0f\x0d\x43\x50\xde\x35\xf1\xae\x2e\x2e\xbd\x0f\xe9\x67\x8c\xef\x84\x77\x4d\xd2\xe7\x84\x78\xc8\x30\x82\xf4\xf9\xf3\x4f\x34\x92\x8f\x74\x8b\x8a\xfa\x5f\x41\xe5\xff\x5f\x48\x25\x50\x64\x2b\x09\xf1\x9e\x41\x69\x26\x78\x36\xdf\xfc\x48\xb8\x40\xa2\x01\xbd\x0d\x21\x87\x4c\xbe\x2f\xb8\x4e\x62\xd0\xde\x35\xf9\xdb\xac\xa2\x52\x46\xcc\xa7\xc8\x04\xdf\x7e\xd1\x82\xa7\x73\xef\xb2\xb9\x52\x89\x20\xf1\x3b\xce\xa5\xf8\xa8\x0b\xc5\xb7\xb9\xc2\xa1\xa2\xf2\x71\xfb\x2d\xa2\x3c\x4c\x68\x08\x87\x6d\x00\x12\x78\x00\xdc\x67\x50\xcc\x27\xc4\x0b\x01\x4b\xbf\x12\xe2\x09\x09\x2a\xfb\xa6\xdf\x83\xd4\xa2\x4f\xf9\xba\xfd\x0d\xa8\x67\xe6\xc3\xfd\x1f\x4c\xe3\xa7\xb2\xb4\x0f\xc5\x62\x05\x5a\x0a\xae\x9d\xaf\xc8\x1e\x5c\x5d\x5e\x56\x3e\x22\xc4\x0b\x40\xfb\x8a\x49\xb4\x9b\xf7\x91\xe8\xc4\xf7\x41\xeb\x5d\x12\x91\x5c\xd2\x45\x49\x7c\xb6\x48\xfb\x8f\x10\xd3\x9a\x30\x42\xbc\x1f\x15\xec\x52\x39\x3f\x6c\x03\xd8\x31\xce\x52\xb9\x3a\x77\x59\x55\xeb\x3f\xad\x7c\xcf\x91\x72\x28\xfd\x76\x28\x7f\xb1\x17\xc0\x8e\x26\x11\x9e\x36\x82\x93\x84\xc3\xbf\x12\x7c\x84\x80\x80\x52\x42\xbd\xd8\x32\xd6\x14\x95\x70\x64\x31\xfc\x9a\x0a\x6d\xd1\x7b\x73\xc4\x02\x4f\x52\x45\x63\x40\x50\x45\x58\x99\x51\x31\x87\xd3\x38\x8b\xfc\x3c\x72\xaa\x3a\xb3\xcc\xca\x34\xec\xaa\x4f\x14\x3c\x25\x4c\x41\x1a\x35\xa8\x12\xa8\x3c\xc5\xbd\xcc\xe4\x6a\x54\x8c\x87\x5e\xd3\x3e\x37\x68\x23\x54\x48\x39\xfb\x2f\x8b\xcb\xe3\x1a\x3d\x25\xa0\xf6\x2d\x2a\xed\x68\xa4\xa7\xd5\x29\x16\x41\x12\x35\xec\xcf\xc4\xda\xbc\xfc\x7c\x57\xf2\x28\xd2\xb0\xea\xcb\x3a\x5a\x0b\x31\x77\x9b\xb2\x30\x6b\x60\x47\xc2\xd8\xa2\x90\x22\x12\xe1\xbe\x0f\x73\xdc\xda\x35\x4d\xbc\x91\x3f\x5f\xf9\x63\xe5\x8f\x95\x3f\x66\xd5\xa6\x33\x7f\x54\x30\x3b\x31\x7b\x6c\x91\x81\xd1\x7f\x72\x12\xb9\x35\x92\x17\x49\x25\x46\xf7\x95\x50\xec\x58\x09\x65\x25\x94\x66\x42\xc1\x09\xbb\x17\x5c\x60\xef\x82\x6b\xe5\x91\x8f\x95\x28\xde\x11\x51\xcc\xd0\xb9\xe0\xf4\x7d\x0b\x2e\xb8\x6b\x59\x99\xe3\x65\xac\xcc\xf1\x8e\x98\x63\x86\x12\x63\xae\x8e\x05\x17\xdf\xaf\xe0\xda\xad\xac\x54\x32\x89\x4e\xef\x89\x4a\x8c\x2d\xbd\x3a\x93\xcf\xd9\x92\x32\x49\x2c\x87\x0c\x8c\xee\x2b\x05\xd8\xd1\x10\xe0\xb2\x11\xfe\x63\xc2\x9b\x71\x84\x10\x54\x75\xf5\x4e\xa8\x98\xa2\x9d\xf0\xf3\x55\x5f\x30\xfa\x22\xe1\x78\x16\xca\x76\xc6\xaa\x03\xa0\xbe\x48\xdd\xc6\x94\xd3\xb0\x5f\x62\xaf\x23\xf6\xb3\x15\xb2\x1c\xe0\x1a\x85\x57\xe4\xda\xd1\x80\x86\x44\x45\xe7\x92\x25\xd3\xbd\x38\x13\x55\xbe\x32\x1e\x9c\x57\xba\x1e\x47\x01\x5a\x24\xca\x87\x71\x0c\x70\x93\xc9\x58\xd0\x31\xa2\x55\x78\x65\x00\x3b\x06\x95\xef\xaf\x8f\xbd\xb5\x80\x37\x63\x1e\x46\xd0\x16\xc5\x3d\xa8\xc0\xe0\x68\x99\xe5\xbb\xd1\x7d\xa5\x00\x3b\xd6\xf2\xfd\x2d\xca\x77\x07\x40\x7d\x91\x6a\xa2\xb9\x8c\x57\x29\x74\x1f\xc0\xde\x66\xeb\x17\x81\xd8\x4c\xd5\x15\xac\x76\x34\x00\xe0\x41\x04\xb5\x20\x37\xf1\x7f\xec\x49\xfb\x51\xdb\x40\x3f\xe5\xac\xfa\x94\x80\xc6\x2e\xf6\x4e\x83\x90\x97\x1b\xc6\x25\x95\x8a\xfb\xc0\x01\x48\x5d\xbc\x59\x33\xed\x5f\x0c\x1c\x7f\x63\x91\x53\xf9\xe6\x88\x17\x0f\x5f\xc0\x2f\x98\xc4\x93\x2a\x85\x11\xb2\x0a\x2e\x8a\xfa\xa8\x82\x96\xa6\x1c\x5e\xf6\xad\xde\x6b\x84\x78\xd0\xca\x6c\x47\xfe\x52\xd1\x90\xc5\x4e\x09\x35\x60\xbd\x2d\x77\x06\xac\x2c\xee\x87\xf7\x5e\xda\x70\x6b\xdb\x59\x4f\x95\xa2\x6e\x88\x7b\x0c\x21\xae\xce\x6f\x8c\x5f\xcb\xad\x6e\xa8\x1c\x27\xf5\xc3\x51\x76\xce\x2e\xc3\x3f\x24\xbb\x8f\x7c\x3f\x26\xa6\xd2\xf9\xf7\xc9\x30\xe7\x3e\xd3\x28\x39\xe5\x1b\x67\x87\x8a\x1c\xf6\xb0\xc7\x12\xba\x8e\x5b\xe8\x50\xd9\x08\x13\xa1\x22\xa0\xb3\x7d\xbe\x08\x1a\xcd\x3b\x96\xa5\x9b\x73\xb4\x13\xd2\xa0\xf5\x40\x10\x07\x80\x94\x45\xb3\xc5\x64\x39\xa4\x7a\x44\xa2\xa1\x6e\x13\xc5\xfa\xad\xf8\xcd\xc2\xfd\xde\x17\x5c\xa3\xa2\x8c\x57\xd3\x70\x37\xae\xf3\x85\x9c\x02\xf3\x5d\xba\xaa\x83\x53\x08\xed\x3a\xab\xdb\xe2\x03\x93\x6a\xde\xcc\x07\xc3\x73\x4c\x5f\xb2\x6e\xdb\x83\x6a\xc6\x78\xd5\x2d\x78\xe5\x7c\xd7\xb2\x0f\x37\xb5\x83\xb6\xbe\xfb\x30\x30\x2b\xf4\x89\xe5\xd2\xb2\xec\xa0\x73\x94\xdd\xa7\xfe\x66\x60\xc4\x56\xbc\x62\x45\x60\xad\x18\x56\x14\x74\xbb\xeb\x3c\xa6\x5c\x60\xa6\x3b\x98\x65\x07\xf2\xde\xab\x74\x5b\x63\xa4\xf1\x38\xa9\xf7\x71\x69\xbe\xaf\xdd\x1b\x79\xff\x9e\xaf\xbe\x6c\x1b\x61\x71\xfd\x7e\xc1\x1c\x36\x5b\x85\x6d\xda\x1a\x68\xb4\x7b\x35\x60\x84\xcd\xb2\x25\xef\x0d\x2f\x79\xcd\x49\xd9\xf4\x95\xf4\xbc\x0e\x72\xea\x89\x61\x8e\xa9\x1c\xfa\x7e\x2f\x8e\xa9\x1f\xed\xcf\xe0\x18\x5b\xe0\x8c\x71\xcc\x24\xd9\x61\x66\x63\x5d\x9a\x18\x6c\xb4\x4b\x33\x63\x58\xb1\xd6\x63\x9c\xf4\x54\xde\x96\xb4\x80\xb8\x97\xb8\x0a\x22\xbb\xd8\x3d\xbe\x1a\xae\xbd\xb8\x3e\xa9\x67\xd5\x57\x8e\xd5\x53\xec\x62\x9b\xdd\xee\xc1\xe8\x99\xd9\x9d\x1f\x86\xce\x06\x9a\xd6\x13\xd8\xfe\xe0\x71\xea\x92\x91\x35\xd4\x02\x4a\x48\xf7\xe5\xc7\x18\x7b\x53\x41\x69\xe7\xd6\x60\xf3\x83\x10\x11\x50\xde\x78\x48\x68\x1f\x9f\xd0\xfa\xf8\x51\xea\x08\xb5\xdf\xfc\xd0\xfa\x97\xe5\x1c\x62\xb5\x79\xa4\x1e\x8b\xa3\x9b\xb0\x5e\x8c\x99\x1f\x49\xbe\x4e\xde\xd9\xa4\xff\x0e\x9b\xff\x03\x00\x00\xff\xff\xbf\x66\x3c\x19\xed\x46\x00\x00")

func v1alphaTrackerTrackerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaTrackerTrackerSwaggerJson,
		"v1alpha/tracker/tracker.swagger.json",
	)
}

func v1alphaTrackerTrackerSwaggerJson() (*asset, error) {
	bytes, err := v1alphaTrackerTrackerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/tracker/tracker.swagger.json", size: 18157, mode: os.FileMode(420), modTime: time.Unix(1591653878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaExtractorExtractorSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x08\xee\x1e\x17\x71\x36\x7b\xcb\x2d\xc8\xa6\x40\x0f\x01\x82\x02\x3d\x15\x41\xc0\x90\x23\x99\x81\x44\x32\x33\xc3\x34\x6e\xe1\x7f\x2f\xc8\xc8\xb1\xa4\x58\x89\x2d\xb5\x75\x0b\x54\x27\x4a\xe4\x3c\xce\x1b\xbe\x99\xa1\xbe\xce\x84\x90\xf4\x59\x95\x25\xa0\x3c\x15\xf2\xe4\xe8\x58\xfe\x93\xbe\x59\x57\x78\x79\x2a\xd2\xbc\x10\x92\x2d\x57\x90\xe6\x1f\xfe\x55\x55\x58\xa8\x39\x3c\x32\x2a\xcd\x1e\x37\xa3\xa3\x80\x9e\x7d\xb6\x16\x42\x3e\x00\x92\xf5\x2e\xdb\x3c\x0d\x85\xf3\x2c\x08\x58\xce\x84\x58\xe5\x3d\xb4\x77\x14\x6b\x20\x79\x2a\x3e\x3d\x59\xa9\x10\x2a\xab\x15\x5b\xef\xe6\x77\xe4\x5d\x5a\x7b\x9d\xd7\x06\xf4\x26\xea\x1d\xd7\x2a\x5e\xd0\xc6\xf9\xf9\xda\x69\x03\x01\x9c\x01\xa7\x2d\xd0\xda\xef\xe7\x65\xc9\xce\x53\xfb\x5d\x08\xe9\x03\x60\xde\xe1\xbd\x49\x4c\xfe\x5f\x03\x2c\x2f\xd6\xac\x6f\x9a\x51\xc3\x3b\x5b\x21\x50\xf0\x8e\x80\x3a\x60\x42\xc8\x93\xe3\xe3\xde\x27\x21\xa4\x01\xd2\x68\x03\x37\xd1\x3a\x13\x14\xb5\x06\xa2\x22\x56\x62\x8d\x74\xd4\x82\xcf\x46\xa4\x17\x50\xab\x17\x60\x42\xc8\xbf\x11\x8a\x84\xf3\xd7\xdc\x40\x61\x9d\x4d\xb8\xb4\x39\xa5\xc6\xdd\x0f\x0d\xb0\xec\x98\xaf\x5a\x6f\xab\xf6\x8e\xd2\x40\xa1\x62\xc5\x6f\x7b\xef\x44\x74\xf0\x18\x40\x33\x18\x01\x88\x1e\x9f\x49\x4c\xe5\x80\xd1\xb1\xad\xe1\x22\x81\xbe\xe2\xf7\x6c\x0b\x03\x19\x14\xaa\x1a\x18\x70\x23\xa0\xa7\xa7\x47\xc7\xa9\x3a\xeb\xfc\xd6\x9b\x65\xdf\x5f\xeb\x86\x66\x10\xee\xa3\x45\x48\x1a\x61\x8c\xf0\xdd\xcf\xea\x3e\x02\xf1\x2e\x94\xaf\x5b\x94\x59\x95\x7d\xb2\xdb\x04\xbc\x81\xbd\x9e\xb5\xe1\x9a\xe8\x0d\x64\x4f\xad\x58\x2f\x26\xe7\xce\x65\x46\xf9\x4d\x32\x27\x3b\xfb\x27\x6f\x9a\xe7\x57\xce\x9b\xe6\xa4\x0e\x92\x35\xcf\xcd\xad\xe5\xd9\xa6\x15\x19\x08\xb4\x41\x6b\xe7\x0f\x2f\x43\x0e\xa0\xbf\xbd\x83\x56\x37\x49\x7d\x2f\x00\xb2\xed\xa5\x84\xf4\x58\x2a\x67\xbf\xa8\x46\x40\x9d\x64\x59\x63\x11\xa3\x75\xa5\xdc\x7a\xb0\xb5\x37\x31\xb7\xf4\xbd\x2d\x9b\x76\x7e\xee\x1d\x31\x2a\xeb\xfa\xe2\xde\x09\x84\xb4\x0f\x2f\xb3\x7c\x6d\xa9\x10\x55\x57\x2c\xd2\x32\xd4\xfd\xf5\xaf\xec\xd5\xd1\xf3\xd6\xba\xd6\x3d\x8a\x4b\xe5\x54\x09\x35\x38\x7e\x67\x3b\x61\xd9\xfb\x60\x2a\xe5\xca\xa8\xca\x51\xa1\xa5\x25\x31\xd4\xa3\x2c\x7d\x44\x0d\x1f\xb1\x1a\x63\x7c\x70\x2d\x8d\x31\x6d\xb7\xa3\xe9\x3a\xda\x5e\x51\x7a\xe9\xba\x87\xba\x86\x7a\xf8\x04\x61\x11\xa4\x62\x9c\x6a\xcf\x88\x68\x15\xb6\x82\x73\xef\x18\x1c\x0f\x46\xab\xe7\x48\x9e\x53\xc6\xe4\x58\xa8\xea\x6a\xbb\x5b\xaf\x7a\x30\xd4\x55\xe2\x1e\x3a\xdd\x31\xbc\x4d\xab\x9c\x10\xdf\xba\x53\x02\x7e\x92\xa6\x7a\x75\x67\x8c\xc2\x3a\xdd\xee\x50\xfa\xea\xfe\x72\x8d\x0e\xd9\xf8\x72\x3e\x70\x4d\x9b\xa4\x07\xd6\x0b\x30\x57\x87\x66\x96\x7f\xab\x6f\x63\x71\xe6\x26\x5d\x18\xd2\xfa\x9b\x7d\x12\xaf\x5d\xa6\x55\x15\xdf\xaa\xef\x9d\x20\x14\x1e\x6b\xc5\xf9\xda\xb7\x64\x78\x2b\x9b\x3b\x17\xd4\x09\x14\xa1\x07\xb0\x33\x3f\xed\xcd\x20\x3d\xeb\x18\x4a\xc0\x21\x7e\xd6\xf1\x7f\x27\x03\x6d\x11\x88\x46\x5e\x04\x0c\xb0\xb2\xd5\x0f\xab\x41\x6d\x49\xed\xa2\xc4\x74\xa9\x9d\xad\x66\xdf\x02\x00\x00\xff\xff\xf2\x42\x83\x32\x2d\x12\x00\x00")

func v1alphaExtractorExtractorSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaExtractorExtractorSwaggerJson,
		"v1alpha/extractor/extractor.swagger.json",
	)
}

func v1alphaExtractorExtractorSwaggerJson() (*asset, error) {
	bytes, err := v1alphaExtractorExtractorSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/extractor/extractor.swagger.json", size: 4653, mode: os.FileMode(420), modTime: time.Unix(1591653878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaSchemaSchemaSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\x83\x30\x10\x44\xef\x7c\xc5\xca\xed\x31\x0a\x6d\x7a\xcb\xad\x87\x7e\x45\x55\x55\x0e\x2c\x64\x23\xb0\xad\xdd\x25\x15\x8a\xf8\xf7\xca\x90\x26\x4e\x14\x94\x48\x3d\x19\x79\xde\x8c\x3d\xb0\x1c\x32\x00\x23\x3f\xb6\xae\x91\xcd\x1a\xcc\x6a\xf9\x62\x16\x71\x8f\x5c\xe5\xcd\x1a\xa2\x0e\x60\x94\xb4\xc1\xa8\xef\x5f\x6d\x13\xb6\x36\x97\x62\x8b\xed\xdf\xb2\x0c\xec\xd5\x8f\x3e\x00\xb3\x47\x16\xf2\x6e\xa4\xa7\x47\x70\x5e\x41\x50\x4d\x06\x30\x8c\xe9\x85\x77\xd2\xb5\x28\x66\x0d\x9f\x93\xcb\x86\xd0\x50\x61\x95\xbc\xcb\x77\xe2\x5d\x64\xbf\x46\x36\xb0\x2f\xbb\xe2\x41\xd6\xea\x36\x82\x87\xe9\x98\x12\x2b\x72\x14\x39\x39\x77\x19\x2f\xbb\xe9\xaa\x77\xd7\x9f\x36\x63\xc5\x3e\x8c\x0d\xfd\x66\x87\x85\x1e\xcb\x4c\x78\x40\x56\x42\x49\xe8\x23\xff\xdd\x71\x73\xb1\x9b\xe4\x88\x32\xb9\xda\x9c\xa4\x61\x71\xf6\xee\x6d\xd3\xe1\x1d\xe3\x22\xd5\x2a\xcf\xad\xd5\xa8\x6e\x7a\xc5\x24\x34\x4b\xd7\xe3\x11\x86\x3b\xa7\xd4\xe2\x07\xb3\xe7\xff\x54\xc4\xab\x80\x87\xfb\x15\xbe\x9c\xad\x47\x4e\x31\x0e\xdb\x4c\x3f\x72\xfa\xb6\xba\x9d\xda\xa2\x88\xad\xef\xbd\xb7\x9b\xd6\x12\xd5\x52\x23\x73\x56\xcb\x6c\xfb\xcb\x1b\x91\x62\x7b\xcd\x03\x98\x67\xc6\x2a\x3a\x9e\xf2\x64\xb6\xf2\x74\xa4\x12\x7e\x98\xfb\x4e\xf1\x3f\xc8\x86\xec\x37\x00\x00\xff\xff\xa3\xf5\xe5\x23\x7d\x03\x00\x00")

func v1alphaSchemaSchemaSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaSchemaSchemaSwaggerJson,
		"v1alpha/schema/schema.swagger.json",
	)
}

func v1alphaSchemaSchemaSwaggerJson() (*asset, error) {
	bytes, err := v1alphaSchemaSchemaSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/schema/schema.swagger.json", size: 893, mode: os.FileMode(420), modTime: time.Unix(1591653878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaDepsDepsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x8e\xa3\x30\x10\x44\xef\x7c\x45\xcb\xbb\xc7\x28\xec\x66\x6f\xb9\xed\x61\xbe\x62\x34\x1a\x39\xd0\x90\x8e\xc0\xb6\xba\x9b\x8c\x50\xc4\xbf\x8f\x6c\xa2\xc4\x89\x82\x12\x69\x2e\x80\x5c\xaf\xca\x2e\x68\x4e\x05\x80\x91\x2f\xdb\xb6\xc8\x66\x0b\x66\xb3\xfe\x63\x56\x71\x8d\x5c\xe3\xcd\x16\xa2\x0e\x60\x94\xb4\xc3\xa8\x1f\xff\xda\x2e\xec\x6d\x59\x63\x90\x74\x59\x07\xf6\xea\x93\x07\xc0\x1c\x91\x85\xbc\x4b\xe4\xfc\x08\xce\x2b\x08\xaa\x29\x00\xa6\x94\x5c\x79\x27\x43\x8f\x62\xb6\xf0\x3e\xbb\x6c\x08\x1d\x55\x56\xc9\xbb\xf2\x20\xde\x45\xf6\x23\xb1\x81\x7d\x3d\x54\x2f\xb2\x56\xf7\x11\x3c\xcd\xdb\xd4\xd8\x90\xa3\xc8\xc9\xb5\x47\x3a\xec\x6e\x68\xfe\xbb\xf1\xb2\x18\xeb\x8d\x21\xb5\xf3\xbb\x03\x56\x7a\x2e\x33\xe3\x01\x59\x09\x25\xa3\xcf\xfc\xe7\xc0\xdd\xcd\x6a\x96\x23\xca\xe4\x5a\x73\x91\xa6\xd5\xd5\x7b\xb4\xdd\x80\x4f\x8c\xab\x5c\x6b\x3c\xf7\x56\xa3\xba\x1b\x15\xb3\xd0\x22\xbf\x9f\xb7\x30\x3c\x38\xa5\x1e\xdf\x98\x3d\xff\xa4\x22\xde\x05\xbc\xdc\xaf\xf2\xf5\x62\x3d\x72\x8a\x71\xd0\x16\xfa\x91\xd3\x7f\x9b\xc7\xa9\x3d\x8a\xd8\xf6\xd9\x7b\x7b\x68\xad\x51\x2d\x75\xb2\x64\xb5\xcc\x76\xbc\x3d\x11\x29\xf6\xf7\x3c\x80\xf9\xcd\xd8\x44\xc7\xaf\x32\x9b\xad\x32\x1f\xa9\x8c\x9f\x96\xbe\x53\xfc\x0f\x8a\xa9\xf8\x0e\x00\x00\xff\xff\x21\xa2\x04\x5f\x79\x03\x00\x00")

func v1alphaDepsDepsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaDepsDepsSwaggerJson,
		"v1alpha/deps/deps.swagger.json",
	)
}

func v1alphaDepsDepsSwaggerJson() (*asset, error) {
	bytes, err := v1alphaDepsDepsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/deps/deps.swagger.json", size: 889, mode: os.FileMode(420), modTime: time.Unix(1591653878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaStoreStoreSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x04\x6d\xc7\xa0\x59\xd3\x5b\x6e\x05\xda\x0d\x1b\x86\xad\xe8\x06\xec\x30\x14\x83\x62\xd3\x0e\x3b\x5b\x12\x28\x3a\x43\x50\xf8\xdf\x07\xc9\x89\xab\xa6\x76\xe3\x20\xc9\x25\x09\xc4\xf7\x1e\xf9\x44\x8a\x79\x4a\x84\x90\xee\x9f\x2a\x0a\x20\x39\x17\x72\x76\xf1\x41\x4e\xfc\x19\xea\xdc\xc8\xb9\xf0\x71\x21\x24\x23\x97\xe0\xe3\xab\x4b\x55\xda\xa5\x9a\x3a\x36\x04\xed\xe7\x85\x25\xc3\x26\xb0\x84\x90\x2b\x20\x87\x46\x07\x6c\xfb\x53\x68\xc3\xc2\x01\xcb\x44\x88\x26\x68\xa7\x46\xbb\xba\x02\x27\xe7\xe2\x77\xcb\x52\xd6\x96\x98\x2a\x46\xa3\xa7\x8f\xce\x68\x8f\x7d\x08\x58\x4b\x26\xab\xd3\x91\x58\xc5\x4b\x0f\x7c\x6a\xd3\x64\x90\xa3\x46\x8f\x73\xcf\x4e\x42\xb1\x8b\x3a\xbf\xd6\xeb\xee\xd0\x1b\x5c\xdb\xe0\xcf\x2c\x1e\x21\xe5\x8d\x99\x16\x6e\x81\x18\xc1\x45\xe8\x0d\xfe\x4f\x4d\xe5\x8b\xd3\x48\xc7\x31\xa1\x2e\x64\x17\x6a\x26\xcf\xdc\x95\x2a\x6b\xd8\x43\x9c\xc4\xb1\xdc\x50\xa5\xd8\x47\x17\x6b\x86\x48\x34\x89\xbf\x37\x29\x24\xd5\x9a\xb1\x82\x5b\x22\x43\xc7\x58\x84\x1d\x81\xd1\xfe\x52\x93\x0d\xda\x43\xcd\xe0\x47\x6d\xc0\x1f\x6a\xbe\x9a\xf5\xab\x56\xe0\x9c\x2a\xf6\xdd\x5b\x2f\x35\x03\x56\x58\xba\x21\xaa\x22\x52\xeb\x97\x15\x21\x43\xb5\x8b\x17\x42\xbe\x27\xc8\x3d\xe3\xdd\x34\x9a\xad\x69\x3c\x52\x11\xbe\xd9\xd3\xa7\xf0\x78\x6e\xa0\x04\x86\x7b\x70\xd6\x68\x07\x6f\xb4\xeb\x35\xf5\x23\xea\x6c\x04\x71\x6f\x9f\xad\x42\x3a\xdb\xdd\x84\x4a\x3f\x91\xb2\xcb\xcf\x0c\xd5\x9d\x42\x3a\xf8\x8a\x3a\xf6\x31\x26\x8b\xad\xc8\xcf\x96\x78\xf0\x0c\xfd\xbd\x3c\xc9\x8b\x8d\x15\x67\x27\x57\xbc\x3a\xb5\x22\xe8\xd4\x64\x9e\xb9\xa3\x3b\xa6\xd9\xb7\x5b\x6e\xaf\x72\xd7\x90\x1b\xc5\xea\x7c\xcb\x70\xa0\xa4\x9e\x49\xda\xc9\x25\x41\xd7\x55\xf7\xa7\x13\x4e\xee\xaf\x7f\x45\xa5\xc8\x2f\x3f\xbe\x7f\xdb\xa6\x7f\xe8\x68\x19\xe4\xaa\x2e\x43\x7d\x1e\xff\x46\x31\xe1\x31\x1c\xb3\x9f\xb3\xd7\xdb\x70\x4c\x5f\xfa\xfb\xa1\x7b\x96\xf6\x81\x6a\xc3\x0d\xf8\x8a\x8e\x4f\xb1\xaa\xfa\x56\xcf\x99\x56\xd5\xc1\x6b\xea\xae\x1e\x63\x31\xd9\xb2\x9b\xa4\x49\xfe\x07\x00\x00\xff\xff\x5c\x42\x73\xa4\x7d\x09\x00\x00")

func v1alphaStoreStoreSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaStoreStoreSwaggerJson,
		"v1alpha/store/store.swagger.json",
	)
}

func v1alphaStoreStoreSwaggerJson() (*asset, error) {
	bytes, err := v1alphaStoreStoreSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/store/store.swagger.json", size: 2429, mode: os.FileMode(420), modTime: time.Unix(1591653879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"v1alpha/tracker/tracker.swagger.json":     v1alphaTrackerTrackerSwaggerJson,
	"v1alpha/extractor/extractor.swagger.json": v1alphaExtractorExtractorSwaggerJson,
	"v1alpha/schema/schema.swagger.json":       v1alphaSchemaSchemaSwaggerJson,
	"v1alpha/deps/deps.swagger.json":           v1alphaDepsDepsSwaggerJson,
	"v1alpha/store/store.swagger.json":         v1alphaStoreStoreSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"v1alpha": &bintree{nil, map[string]*bintree{
		"deps": &bintree{nil, map[string]*bintree{
			"deps.swagger.json": &bintree{v1alphaDepsDepsSwaggerJson, map[string]*bintree{}},
		}},
		"extractor": &bintree{nil, map[string]*bintree{
			"extractor.swagger.json": &bintree{v1alphaExtractorExtractorSwaggerJson, map[string]*bintree{}},
		}},
		"schema": &bintree{nil, map[string]*bintree{
			"schema.swagger.json": &bintree{v1alphaSchemaSchemaSwaggerJson, map[string]*bintree{}},
		}},
		"store": &bintree{nil, map[string]*bintree{
			"store.swagger.json": &bintree{v1alphaStoreStoreSwaggerJson, map[string]*bintree{}},
		}},
		"tracker": &bintree{nil, map[string]*bintree{
			"tracker.swagger.json": &bintree{v1alphaTrackerTrackerSwaggerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
