// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package swagger generated by go-bindata.// sources:
// v1alpha/tracker/tracker.swagger.json
// v1alpha/extractor/extractor.swagger.json
// v1alpha/schema/schema.swagger.json
// v1alpha/deps/deps.swagger.json
// v1alpha/store/store.swagger.json
package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _v1alphaTrackerTrackerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\x6c\x8f\x8b\x38\x4d\x6f\xb9\x2d\xba\x2d\x50\xa0\x7b\x69\xda\x53\x11\x04\x0c\x35\x96\xb9\x2b\x91\x0c\x3f\xd2\xba\x0b\xff\xf7\x82\x14\x15\x89\xb2\x25\x5b\x1f\x76\x6c\x54\x04\x16\x9b\x84\xe2\x68\x1e\x67\xde\xe3\x78\xe8\x6f\x0b\x84\xb0\xfe\x9b\xa4\x29\x28\x7c\x8f\xf0\xdd\xcd\x2d\xfe\xe0\xfe\xc6\xf8\x4a\xe0\x7b\xe4\xe6\x11\xc2\x86\x99\x0c\xdc\x7c\x02\x52\xd3\x4c\xd8\xe4\x89\x48\xb6\x7c\xfd\x81\x64\x72\x4d\x96\x46\x11\xfa\x15\x54\xf9\xff\x8d\x54\xc2\x08\x6f\x07\x21\xfc\x0a\x4a\x33\xc1\xdd\xea\xf0\x23\xe2\xc2\x20\x0d\x06\x2f\x10\xda\xfa\xb7\x51\xc1\xb5\xcd\x41\xe3\x7b\xf4\x57\xb1\x8a\x48\x99\x31\x4a\x0c\x13\x7c\xf9\x45\x0b\xee\x9e\x7d\xf4\xcf\x4a\x25\x12\x4b\x8f\x7c\x96\x98\xb5\xae\x60\xbc\x39\x9c\x2a\x22\xd7\xcb\x6f\x19\xe1\xa9\x25\x29\x6c\x97\x09\x48\xe0\x09\x70\xca\xa0\x7a\x1e\x21\x9c\x82\xa9\xfd\x8a\x10\x16\x12\x94\x7f\xd3\xaf\x89\x43\xf4\xa9\x5c\xb7\x79\x00\xf5\xca\x28\x3c\xfd\xc6\xb4\xf9\x54\xb7\xf6\xa1\x5a\xac\x40\x4b\xc1\x75\xf4\x0a\x3f\x71\x77\x7b\xdb\xf8\x13\x72\x7b\xad\xa9\x62\xd2\x84\xcd\xfb\x88\xb4\xa5\x14\xb4\x5e\xd9\x0c\x95\x96\x6e\x6a\xe6\xfd\x22\x4d\xd7\x90\x93\x1d\x63\x08\xe1\xef\x15\xac\x9c\x9d\xef\x96\x09\xac\x18\x67\xce\xae\x2e\x43\xd6\xf4\xfa\xf7\x60\x1f\x47\x56\xb6\xb5\xdf\xb6\xf5\x17\xe3\x04\x56\xc4\x66\xe6\x30\x08\x8e\x2c\x87\x7f\x24\x50\x03\x09\x02\xa5\x84\x7a\xc3\x32\x16\x8a\xb2\xdc\xb0\x1c\x7e\x76\x46\x3b\xfc\x5e\xec\x41\x80\x25\x51\x24\x07\x03\xaa\x4a\xab\x62\x34\xe0\x70\x92\x7b\x1e\x94\x99\xd3\xf4\x99\x79\x94\x2e\xed\x9a\x33\x0a\x5e\x2c\x53\xe0\xb2\xc6\x28\x0b\x8d\x59\xb3\x91\xde\xae\x36\x8a\xf1\x14\xb7\xed\x73\x8b\x37\x42\xa5\x84\xb3\x7f\x7d\x5e\xee\xf7\xe8\xc5\x82\xda\x74\xb8\xb4\x22\x99\x9e\xd6\xa7\x5c\x24\x36\x6b\xd9\x9f\x89\xbd\x79\xfb\xf9\xb1\x16\x51\x43\xd2\x66\x2c\x77\xd9\x5a\x99\x79\x5c\xd4\x8d\x05\x80\x47\x08\x86\x99\x50\x2e\xcc\x15\x8a\x85\x99\xa5\xa2\x1c\xb3\x54\xcc\x52\xb1\x26\xcb\x02\x4d\x2f\x59\xf8\xec\x97\xd4\x25\xe1\x7a\x84\xa0\xf0\x7d\x16\x81\x30\x5a\x52\x5c\xb6\x0a\xc0\x98\x04\x67\xdc\x80\x2b\xdc\x1b\xd3\x2b\xa1\x72\x62\xc2\x03\x3f\xde\xf5\xa5\x23\x15\x96\x9b\x8b\x70\xf6\x68\xb6\x46\x04\xea\xcb\xd4\x65\x4e\x38\x49\xbd\xff\x23\x18\xfb\x39\x18\xb9\x1e\xe2\x16\x0e\xcf\xcc\x0d\xa3\x85\x0d\x56\x65\x97\x72\x4e\xba\xbd\xb8\x10\x57\xbe\x32\x9e\x5c\xd6\x81\x3d\x4e\x02\xb4\xb0\x8a\xc2\x38\x05\x78\xf0\x36\xae\xa8\x86\x0f\x0e\xcf\x0a\x10\xc6\xa0\x02\xfe\xfc\xdc\x9b\x4b\xf8\x62\x9c\x46\x11\x74\x60\x71\x0f\x29\x28\x78\x74\x9d\xe5\x7b\xe1\xfb\x2c\x01\x61\xcc\xe5\xfb\x7b\x94\xef\x11\x81\xfa\x32\xb5\xc8\xe6\x3a\x5f\xa5\xd0\x7d\x08\xfb\x87\x5f\x7f\x15\x8c\xf5\xae\xce\x64\x0d\xa3\x85\x00\xcf\x22\xd9\x49\xf2\x22\xff\xf7\xcd\x74\x37\xdb\x06\xc6\xa9\x54\xd5\x17\x0b\xda\x1c\x83\x77\x1a\x86\xbc\xdd\xa7\xd5\x5c\xaa\x6e\xbf\x12\x90\xba\x6a\x6b\x15\x1f\xff\x72\xe0\xe6\x17\x96\x45\x95\x6f\xc9\x78\xf1\xfc\x05\x68\xa5\x24\x58\x2a\x47\x23\xc3\x1a\xbc\xa8\xea\xa3\x06\x5b\xda\xce\xf0\x7a\x6c\xf5\x46\x1b\xc8\x07\xad\xf4\x3b\xf2\xa7\xca\x86\x2c\x8e\x4a\xa8\x01\xeb\x43\xb9\x33\x60\x65\x75\x1b\xda\x7b\x69\xcb\x1d\x65\xb4\x9e\x28\x45\xe2\x14\xc7\xcc\x40\xde\x7c\xbe\x35\x7f\x83\xb6\xc6\xa9\xb2\x5f\xd4\xb7\x7b\xd5\xd9\x5f\xfd\x3e\xdb\xd5\x47\xbe\x19\x93\x53\xee\xf9\x27\x3b\x2c\xb8\xaf\x24\xb3\x87\x62\x13\xed\x50\x75\x86\x3d\x6f\x4c\x8d\x5d\xfb\x11\x46\x52\x36\x02\x22\x34\x0c\x1c\x8d\x8f\x8a\xa4\x15\xde\xbe\x53\xba\xfd\x8c\x8e\x52\x1a\xb4\x1e\x48\xe2\x04\x0c\x61\xd9\xc9\x72\xb2\x9e\x52\x3d\x32\xb1\x90\xee\x22\x8b\xf5\x7b\xe9\x5b\xa0\xfb\x13\x15\x5c\x1b\x45\x18\x6f\x1e\xc3\xc7\x69\x1d\x15\x72\x0a\xce\x1f\xf3\xa9\x6a\x1b\x15\x42\xab\xa3\xdd\xed\x88\x41\x71\xd4\xbc\x5b\x0c\x86\x9f\x31\x7d\xc5\xba\x6b\x0f\x9a\x27\xc6\x59\xb7\xe0\xcc\xe7\x5d\xc7\x3e\x3c\xec\x34\xda\xfa\xee\xc3\xc0\x53\xa1\x4f\x2e\xd7\x96\xf9\x46\xe7\x28\xdc\x87\xbe\x61\x33\x62\x2b\xce\x58\x11\x04\x14\xc3\x8a\x82\xee\xef\x0d\x4c\xb0\x01\xe6\x5a\xe0\x37\x2f\x5d\x46\x60\xdf\xbd\x67\x9e\x14\x78\x70\x3a\x38\x1c\xe4\x6b\x20\xe8\xf8\x8a\x78\x04\x66\xd9\xa1\x7f\xc3\x4b\x9f\xa2\x63\x32\x7d\x45\x75\xda\x00\x45\xe7\xca\xb0\xc0\x34\x9a\x7f\xff\x97\xc0\xec\xb6\x78\x4f\x10\x98\x70\xd0\x8d\x09\xcc\x24\x12\x79\x62\xb0\xb1\x4c\x0c\x06\x1d\xcb\xcc\x18\x55\xdc\xa9\x35\x0f\x46\xaa\x2c\x4f\x7b\x54\x3e\x7d\x18\x79\x0c\xee\xf1\x55\xd1\xce\x05\xe6\x41\x3f\x9b\xb1\x8a\x50\x4f\xb1\x8b\x5d\xb8\xe3\x06\xd9\x85\xe1\x2e\x9b\x62\x27\x23\x4d\x67\x27\xae\x3f\x79\xe2\xae\xf0\x98\xae\x8b\x33\xe4\x4a\xda\x16\xdc\xcf\x42\x64\x40\x78\x6b\xf7\x24\x4c\x1f\xf0\x7a\x7f\x8f\x69\x84\xdb\xef\xde\xcd\xfb\xe9\x7a\x3e\xdd\x77\x45\x64\xb7\xc8\x1d\x5d\x9a\xf7\x92\x90\xb2\x57\x73\x1e\x21\x5e\xb8\x7f\xdb\xc5\x7f\x01\x00\x00\xff\xff\xb0\xe1\x8d\x79\x02\x33\x00\x00")

func v1alphaTrackerTrackerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaTrackerTrackerSwaggerJson,
		"v1alpha/tracker/tracker.swagger.json",
	)
}

func v1alphaTrackerTrackerSwaggerJson() (*asset, error) {
	bytes, err := v1alphaTrackerTrackerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/tracker/tracker.swagger.json", size: 13058, mode: os.FileMode(420), modTime: time.Unix(1593386726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaExtractorExtractorSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x08\xee\x1e\x17\x71\x36\x7b\xcb\x2d\xc8\x66\x81\x3d\x04\x08\x16\xd8\x53\x11\x04\x13\x72\x24\x33\x90\x48\x66\x38\x4c\xe3\x16\xfe\xf7\x82\x8c\x6c\x4b\x8a\x95\xd8\x52\x5b\xb7\x40\x75\xa2\x44\xce\xe3\xbc\xe1\x9b\x19\xea\xf3\x4c\x08\x19\x3e\x42\x59\x22\xc9\x73\x21\xcf\x4e\x4e\xe5\x1f\xe9\x9b\xb1\x85\x93\xe7\x22\xcd\x0b\x21\xd9\x70\x85\x69\x5e\xa3\x0f\xaa\x72\x51\xdf\x81\x37\xf3\xa7\x3f\xa1\xf2\x0b\x98\xe3\x33\x13\x28\x76\xb4\x1d\x9d\x78\x72\xec\x32\x96\x10\xf2\x09\x29\x18\x67\x13\x42\x33\x14\xd6\xb1\x08\xc8\x72\x26\xc4\x2a\xef\xa8\x9c\x0d\xb1\xc6\x20\xcf\xc5\x87\x17\x2b\xf0\xbe\x32\x0a\xd8\x38\x3b\x7f\x08\xce\xa6\xb5\xb7\x79\xad\x27\xa7\xa3\xda\x73\x2d\xf0\x22\x6c\xa9\x6c\x9c\xd6\xe8\xd1\x6a\xb4\xca\x60\x58\xfb\xbd\x59\x96\xec\x5c\x68\xbf\x0b\x21\x9d\x47\xca\x3b\xfc\xab\x13\x93\xbf\xd7\x00\xcb\xab\x35\xeb\xbb\x66\xd4\xf0\xce\x56\x84\xc1\x3b\x1b\x30\x74\xc0\x84\x90\x67\xa7\xa7\xbd\x4f\x22\x05\x38\x28\x32\x9e\x9b\x68\x5d\x88\x10\x95\xc2\x10\x8a\x58\x89\x35\xd2\x49\x0b\x3e\x1b\x05\xb5\xc0\x1a\x5e\x81\x09\x21\x7f\x27\x2c\x12\xce\x6f\x73\x8d\x85\xb1\x26\xe1\x86\xed\x29\x35\xee\xfe\xd7\x00\xcb\x8e\xf9\xaa\xf5\xb6\x6a\xef\x28\x35\x16\x10\x2b\x7e\xdf\x7b\x2b\xa2\xc5\x67\x8f\x8a\x51\x0b\x24\x72\xb4\x21\x31\x95\x03\x45\xcb\xa6\xc6\xab\x04\xfa\x86\xdf\xb3\x1d\x0c\xa4\x07\x82\x1a\x19\x69\x2b\xa0\x97\xa7\x47\xc7\x42\x9d\x55\x7f\xef\xf4\xb2\xef\xaf\xb1\x43\x33\x84\x8f\xd1\x10\x26\x8d\x30\x45\xfc\xea\x67\xf5\x18\x31\xf0\x3e\x94\x6f\x5b\x94\x19\xca\x3e\xd9\x5d\x02\xde\xc2\xde\xce\xda\x70\x4d\xf4\x06\xb2\xa7\x06\x56\x8b\xc9\xb9\x73\x9d\x51\x7e\x92\xcc\xc9\xce\xfe\xca\x9b\xe6\xf9\x91\xf3\xa6\x39\xa9\xa3\x64\xcd\xa6\xb9\xb5\x3c\xdb\xb6\xa2\xd4\x4c\xb7\x68\xed\xfc\xe1\xa5\xcf\x01\x74\xf7\x0f\xd8\xea\x26\xa9\xef\x79\x24\x36\xbd\x94\x90\x8e\x4a\xb0\xe6\x13\x34\x02\xea\x24\xcb\x1a\x2b\x30\x19\x5b\xca\x9d\x07\x5b\x3b\x1d\x73\x83\x3f\xd8\xb2\x69\xe7\x97\xce\x06\x26\x30\xb6\x2f\xee\xbd\x40\x82\x72\xfe\x75\x96\xaf\x2d\x81\x08\xba\x62\x91\x86\xb1\xee\xaf\x7f\x63\xaf\x8e\x9e\x77\xd6\xb5\xee\x51\x5c\x83\x85\x12\x6b\xb4\xfc\x8f\xe9\x84\xe5\xe0\x83\xa9\xc0\x96\x11\xca\x51\xa1\x0d\xcb\xc0\x58\x8f\xb2\x74\x91\x14\xfe\x4f\xd5\x18\xe3\xa3\x6b\x69\x8c\x69\xbb\x1d\x4d\xd7\xd1\xee\x8a\xd2\x4b\xd7\x03\xd4\x35\xd4\xc3\x27\x08\x2b\x60\x2a\xc6\xa9\xf6\x8c\x88\x56\x61\x2a\xbc\x74\x96\xd1\xf2\x60\xb4\x7a\x8e\xe4\x39\xd0\x3a\xc7\x02\xaa\x9b\xdd\x6e\xbd\xe9\xc1\x50\x57\x89\x07\xe8\x74\xcf\xf0\x36\xad\x72\x42\x7c\xeb\x4e\x09\xf8\x4e\x9a\xea\xd5\x9d\x31\x0a\xeb\x74\xbb\x63\xe9\xab\xfb\xcb\x35\x3a\x64\xe3\xcb\xf9\xc0\x35\x6d\x92\x1e\x58\x2d\x50\xdf\x1c\x9b\x59\xfe\xad\xbe\x8f\xc5\x85\x9d\x74\x61\x48\xeb\xef\x0e\x49\xbc\x76\x99\x86\x2a\xbe\x57\xdf\x3b\x41\x28\x1c\xd5\xc0\xf9\xda\xb7\x64\x7c\x2f\x9b\x3b\x17\xd4\x09\x14\xb1\x07\xb0\x37\x3f\xe5\xf4\x20\x3d\x63\x19\x4b\xa4\x21\x7e\xc6\xf2\x5f\x67\x03\x6d\x11\x43\x18\x79\x11\xd0\xc8\x60\xaa\x6f\x56\x83\xda\x92\xda\x47\x89\xe9\x52\x3b\x5b\xcd\xbe\x04\x00\x00\xff\xff\xd5\xd5\x2f\xbd\x3b\x12\x00\x00")

func v1alphaExtractorExtractorSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaExtractorExtractorSwaggerJson,
		"v1alpha/extractor/extractor.swagger.json",
	)
}

func v1alphaExtractorExtractorSwaggerJson() (*asset, error) {
	bytes, err := v1alphaExtractorExtractorSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/extractor/extractor.swagger.json", size: 4667, mode: os.FileMode(420), modTime: time.Unix(1593386726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaSchemaSchemaSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\xfa\x30\x0c\xc6\xef\x7d\x0a\x2b\xff\xff\x11\xd1\x8d\xdd\xb8\xed\xb0\xa7\x98\x26\x14\x5a\xb7\x18\xb5\x49\x64\xbb\x4c\x15\xea\xbb\x4f\x29\x1d\x04\x44\x05\xd2\x4e\xa9\xec\xdf\xf7\x39\x5f\xeb\x1e\x33\x00\x23\xdf\xb6\xae\x91\xcd\x1a\xcc\x6a\xf9\x62\x16\xb1\x46\xae\xf2\x66\x0d\xb1\x0f\x60\x94\xb4\xc1\xd8\x2f\x31\x48\xd1\xf8\xae\xdc\xd8\x40\xf9\xe1\xd5\x36\x61\x67\x73\x29\x76\xd8\xfe\x1e\xcb\xc0\x5e\xfd\xe8\x02\x60\x0e\xc8\x42\xde\x45\xed\xf4\x08\xce\x2b\x08\xaa\xc9\x00\x86\x71\x56\xe1\x9d\x74\x2d\x8a\x59\xc3\xe7\x49\x65\x43\x68\xa8\xb0\x4a\xde\xe5\x7b\xf1\x2e\xb2\x5f\x23\x1b\xd8\x97\x5d\xf1\x24\x6b\x75\x17\xc1\xe3\x69\x4c\x89\x15\x39\x8a\x9c\x5c\x92\x8d\x97\xdd\x76\xd5\xbb\xeb\xcf\xc5\x18\xb8\x0f\x63\x5e\xbf\xdd\x63\xa1\x53\x98\x13\x1e\x90\x95\x50\x12\x7a\xe2\x37\x1d\x37\x57\xd5\xc4\x47\x94\xc9\xd5\xe6\xdc\x1a\x16\x17\xed\xc1\x36\x1d\x3e\x10\x2e\xd2\x5e\xe5\xb9\xb5\x1a\xbb\xdb\x5e\x31\x31\xcd\xd2\x73\x1a\x61\xb8\x73\x4a\x2d\x7e\x30\x7b\xfe\x4b\x44\xbc\x31\x78\x3a\x5f\xe1\xcb\xd9\x78\xe4\x14\xe3\xea\xcd\xe4\x23\xa7\x6f\xab\xfb\xae\x2d\x8a\xd8\xfa\xd1\x7b\xbb\x2b\x2d\x51\x2d\x35\x32\x27\xb5\xcc\xb6\xbf\xbe\x11\x29\xb6\xb7\x3c\x80\xf9\xcf\x58\x45\xc5\xbf\x3c\xd9\xad\x3c\x5d\xa9\x84\x1f\xe6\xbe\x53\xfc\x0f\xb2\x21\xfb\x09\x00\x00\xff\xff\x9b\xfc\xdd\x16\x8b\x03\x00\x00")

func v1alphaSchemaSchemaSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaSchemaSchemaSwaggerJson,
		"v1alpha/schema/schema.swagger.json",
	)
}

func v1alphaSchemaSchemaSwaggerJson() (*asset, error) {
	bytes, err := v1alphaSchemaSchemaSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/schema/schema.swagger.json", size: 907, mode: os.FileMode(420), modTime: time.Unix(1593386726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaDepsDepsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\x82\x40\x10\x86\xef\x3c\xc5\x64\xdb\xa3\x91\xd6\xde\xbc\xf5\xd0\xa7\x68\x1a\xb3\xc2\x80\x63\x60\x67\x33\x3b\xd8\x10\xc3\xbb\x37\x8b\x44\x57\x23\xd1\xa4\x17\x20\x33\xdf\xff\xcf\xfe\x30\x1c\x33\x00\x13\x7e\x6d\x5d\xa3\x98\x35\x98\xd5\xf2\xcd\x2c\x62\x8d\x5c\xc5\x66\x0d\xb1\x0f\x60\x94\xb4\xc1\xd8\x2f\xd1\x87\xa2\xe1\xae\xdc\x58\x4f\xf9\xe1\xdd\x36\x7e\x67\xf3\x58\x1d\x2f\x4b\x2f\xac\x3c\x3a\x00\x98\x03\x4a\x20\x76\x51\x37\x3d\x82\x63\x85\x80\x6a\x32\x80\x61\x9c\x53\xb0\x0b\x5d\x8b\xc1\xac\xe1\xfb\xa4\xb2\xde\x37\x54\x58\x25\x76\xf9\x3e\xb0\x8b\xec\xcf\xc8\x7a\xe1\xb2\x2b\x9e\x64\xad\xee\x22\x78\x3c\x8d\x29\xb1\x22\x47\x91\x0b\x97\x54\xe3\x61\xb7\x5d\xf5\xe9\xfa\x73\x31\x86\xed\xfd\x98\x95\xb7\x7b\x2c\x74\x0a\x73\xc2\x3d\x8a\x12\x86\x84\x9e\xf8\x4d\x27\xcd\x55\x35\xf1\x09\x2a\xe4\x6a\x73\x6e\x0d\x8b\x8b\xf6\x60\x9b\x0e\x1f\x08\x17\x69\xaf\x62\x69\xad\xc6\xee\xb6\x57\x4c\x4c\xb3\xf4\x3e\x8d\x30\xd2\x39\xa5\x16\xbf\x44\x58\xfe\x13\x11\x6f\x0c\x9e\xce\x57\x70\x39\x1b\x8f\x9c\x62\x5c\xbb\x99\x7c\xe4\xf4\x63\x75\xdf\xb5\xc5\x10\x6c\xfd\xe8\xbd\xdd\x95\x96\xa8\x96\x9a\x30\x27\xb5\x22\xb6\xbf\x3e\x11\x29\xb6\xb7\x3c\x80\x79\x15\xac\xa2\xe2\x25\x4f\x76\x2b\x4f\x57\x2a\xe1\x87\xb9\xef\x14\xff\x83\x6c\xc8\xfe\x02\x00\x00\xff\xff\xa6\xcd\x5e\xf0\x87\x03\x00\x00")

func v1alphaDepsDepsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaDepsDepsSwaggerJson,
		"v1alpha/deps/deps.swagger.json",
	)
}

func v1alphaDepsDepsSwaggerJson() (*asset, error) {
	bytes, err := v1alphaDepsDepsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/deps/deps.swagger.json", size: 903, mode: os.FileMode(420), modTime: time.Unix(1593386727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaStoreStoreSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x08\xfa\xbe\x63\xd0\xac\xe9\x2d\xb7\x02\xed\x86\x0d\xc3\x56\x74\x03\x76\x18\x8a\x42\xb1\x68\x47\x9d\x2d\x09\x14\x95\x21\x28\xfc\xdf\x07\xc9\x89\xab\xa6\x76\xe3\x20\xc9\x25\x09\xc4\xf7\x1e\xf9\x44\x8a\x79\xce\x18\xe3\xee\xaf\x28\x4b\x40\x3e\x67\x7c\x76\xf1\x81\x4f\xc2\x99\xd2\x85\xe1\x73\x16\xe2\x8c\x71\x52\x54\x41\x88\x4b\xb0\x2e\xaf\x8c\x97\x8f\xc2\xaa\xe9\xea\x52\x54\x76\x29\xa6\x8e\x0c\x42\xfb\x79\x61\xd1\x90\x89\x1a\x8c\xf1\x15\xa0\x53\x46\x07\xe6\xe6\x27\xd3\x86\x98\x03\xe2\x19\x63\x4d\xcc\x94\x1b\xed\x7c\x0d\x8e\xcf\xd9\xef\x96\x25\xac\xad\x54\x2e\x48\x19\x3d\x7d\x72\x46\x07\xec\x43\xc4\x5a\x34\xd2\xe7\x23\xb1\x82\x96\x01\xf8\xdc\xa6\x91\x50\x28\xad\x02\xce\xbd\xf8\x8a\xc5\x2e\x7c\x71\xad\xd7\xdd\x61\xb0\xbb\xb6\xd1\xad\x59\x3c\x41\x4e\x1b\x33\x2d\xdc\x02\x92\x02\x97\xa0\x37\xf8\x47\x8f\xd5\xab\xd3\x44\xc7\x11\x2a\x5d\xf2\x2e\xd4\x4c\x5e\xb8\x2b\x51\x79\xd8\x43\x9c\xa4\xb1\xc2\x60\x2d\x28\x44\x17\x6b\x82\x44\x34\x4b\xbf\x37\x29\x38\x7a\x4d\xaa\x86\x5b\x44\x83\xc7\x58\x84\x1d\x81\xd1\xfe\x72\x23\x07\xed\x29\x4d\x10\x06\x6f\xc0\x9f\xd2\x74\x35\xeb\x57\xad\xc1\x39\x51\xee\xbb\xb7\x5e\xaa\x04\x12\xaa\x72\x43\x54\x81\x28\xd6\xaf\x2b\x52\x04\xf5\x2e\x9e\x31\xfe\x3f\x42\x11\x18\xff\x4d\x93\xd9\x9a\xa6\x23\x95\xe0\x9b\x3d\x7d\x8a\x8f\xe7\x06\x2a\x20\xb8\x07\x67\x8d\x76\xf0\x4e\xbb\xde\x52\x3f\x2a\x2d\x47\x10\xf7\xf6\xd9\x0a\x85\x67\xbb\x9b\x58\xe9\x27\x14\x76\xf9\x99\xa0\xbe\x13\x0a\x0f\xbe\xa2\x8e\x7d\x8c\xc9\x72\x2b\xf2\xb3\x25\x1e\x3c\x43\x7f\x2e\x4f\xf2\x62\x53\xc5\xd9\xc9\x15\xaf\x4e\xad\x08\x3a\x37\x32\x30\x77\x74\xc7\x34\xfb\x76\xcb\xed\x55\xee\x1a\x72\x23\x48\x9c\x6f\x19\x0e\x94\xd4\x33\x49\x3b\xb9\x38\x68\x5f\x77\x7f\x3a\xf1\xe4\xfe\xfa\x57\x52\x0a\xff\xf2\xe3\xfb\xb7\x6d\xfa\x87\x8e\x26\xa1\x10\xbe\x8a\xf5\x05\xfc\x3b\xc5\xc4\xc7\x70\xcc\x7e\x96\x6f\xb7\xe1\x98\xbe\xf4\xf7\x43\xf7\x2c\xed\x03\xd5\x86\x1b\xf0\x55\x39\x3a\xc5\xaa\xea\x5b\x3d\x67\x5a\x55\x07\xaf\xa9\x3b\x3f\xc6\x62\xb6\x65\x37\x59\x93\xfd\x0b\x00\x00\xff\xff\x74\x37\xef\xc2\x8b\x09\x00\x00")

func v1alphaStoreStoreSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaStoreStoreSwaggerJson,
		"v1alpha/store/store.swagger.json",
	)
}

func v1alphaStoreStoreSwaggerJson() (*asset, error) {
	bytes, err := v1alphaStoreStoreSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/store/store.swagger.json", size: 2443, mode: os.FileMode(420), modTime: time.Unix(1593386727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"v1alpha/tracker/tracker.swagger.json":     v1alphaTrackerTrackerSwaggerJson,
	"v1alpha/extractor/extractor.swagger.json": v1alphaExtractorExtractorSwaggerJson,
	"v1alpha/schema/schema.swagger.json":       v1alphaSchemaSchemaSwaggerJson,
	"v1alpha/deps/deps.swagger.json":           v1alphaDepsDepsSwaggerJson,
	"v1alpha/store/store.swagger.json":         v1alphaStoreStoreSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"v1alpha": &bintree{nil, map[string]*bintree{
		"deps": &bintree{nil, map[string]*bintree{
			"deps.swagger.json": &bintree{v1alphaDepsDepsSwaggerJson, map[string]*bintree{}},
		}},
		"extractor": &bintree{nil, map[string]*bintree{
			"extractor.swagger.json": &bintree{v1alphaExtractorExtractorSwaggerJson, map[string]*bintree{}},
		}},
		"schema": &bintree{nil, map[string]*bintree{
			"schema.swagger.json": &bintree{v1alphaSchemaSchemaSwaggerJson, map[string]*bintree{}},
		}},
		"store": &bintree{nil, map[string]*bintree{
			"store.swagger.json": &bintree{v1alphaStoreStoreSwaggerJson, map[string]*bintree{}},
		}},
		"tracker": &bintree{nil, map[string]*bintree{
			"tracker.swagger.json": &bintree{v1alphaTrackerTrackerSwaggerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
