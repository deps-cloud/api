// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package swagger generated by go-bindata.// sources:
// depscloud/api/v1beta/core.swagger.json
// depscloud/api/v1beta/manifest.swagger.json
// depscloud/api/v1beta/rpc.swagger.json
// graphstore/api/v1beta/graphstore.swagger.json
// v1alpha/deps/deps.swagger.json
// v1alpha/extractor/extractor.swagger.json
// v1alpha/schema/schema.swagger.json
// v1alpha/store/store.swagger.json
// v1alpha/tracker/tracker.swagger.json
package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _depscloudApiV1betaCoreSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\x83\x30\x0c\x86\xef\x3c\x85\x95\xed\x58\x95\xad\xbb\xf5\xb6\xc3\x9e\x62\x9a\xa6\x00\x86\xb9\x82\x38\x72\x4c\x27\x54\xf1\xee\x53\x28\x6a\xd3\xaa\xa8\x95\x76\x02\xf9\xff\x7e\x3b\x3f\x38\x87\x0c\xc0\x84\x5f\xdb\x34\x28\x66\x0b\x66\xb3\x7e\x31\xab\x58\x23\x57\xb3\xd9\x42\xd4\x01\x8c\x92\xb6\x18\xf5\x0a\x7d\x28\x5b\xee\xab\xdc\x7a\xca\xf7\xaf\x05\xaa\xcd\x4b\x16\x5c\x7b\x61\xe5\xc9\x0b\x60\xf6\x28\x81\xd8\x45\xc7\xfc\x0a\x8e\x15\x02\xaa\xc9\x00\xc6\x69\x42\xc9\x2e\xf4\x1d\x06\xb3\x85\xcf\xa3\xcb\x7a\xdf\x52\x69\x95\xd8\xe5\xbb\xc0\x2e\xb2\x5f\x13\xeb\x85\xab\xbe\x7c\x90\xb5\xfa\x13\xc1\xc3\x71\x4c\x85\x35\x39\x8a\x5c\x38\xe7\x99\x0e\x5b\xf4\xf5\xbb\x1b\x4e\xc5\x18\x73\xf0\x53\x4a\x2e\x76\x58\xea\x1c\xe6\x88\x7b\x14\x25\x0c\x09\x3d\xf3\xdf\xbd\xb4\x17\xd5\xa4\x4f\x50\x21\xd7\x98\x93\x34\xae\xce\xde\xbd\x6d\x7b\xbc\x63\x5c\xa5\x5a\xcd\xd2\x59\x8d\x6a\x31\x28\x26\x4d\xb3\xf4\x39\x8f\x30\xd2\x3b\xa5\x0e\x3f\x44\x58\xfe\x13\x11\xaf\x1a\x3c\x9c\xaf\xe4\x6a\x31\x1e\x39\xc5\xb8\x70\x0b\xf9\xc8\xe9\xdb\xe6\x76\xd7\x0e\x43\xb0\xcd\xbd\xef\x76\xd3\x5a\xa1\x5a\x6a\xc3\x92\xd5\x8a\xd8\xe1\xf2\x44\xa4\xd8\x5d\xf3\x00\xe6\x59\xb0\x8e\x8e\xa7\x3c\xd9\xad\x3c\x5d\xa9\x84\x1f\x97\xfe\x53\xbc\x07\xd9\x98\xfd\x05\x00\x00\xff\xff\x99\x98\xd1\x23\x81\x03\x00\x00")

func depscloudApiV1betaCoreSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_depscloudApiV1betaCoreSwaggerJson,
		"depscloud/api/v1beta/core.swagger.json",
	)
}

func depscloudApiV1betaCoreSwaggerJson() (*asset, error) {
	bytes, err := depscloudApiV1betaCoreSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "depscloud/api/v1beta/core.swagger.json", size: 897, mode: os.FileMode(420), modTime: time.Unix(1607497979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _depscloudApiV1betaManifestSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x8f\xdb\x36\x13\xbe\xfb\x57\x0c\xf4\xbe\xc7\xc2\x4e\xd3\x5b\x6e\x01\x9a\x02\x3d\x04\x28\x9a\xde\x8a\xc5\x2e\x4d\x8e\x2c\xa6\x12\xa9\x70\x86\xbb\x31\x8a\xfd\xef\x05\x29\xda\xa6\x64\xd9\x92\xd7\x1b\x64\x17\x88\x81\x05\xd6\x12\x67\xf8\xcc\xc7\x33\x33\xa4\xff\x5d\x00\x14\xf4\x20\x36\x1b\x74\xc5\x3b\x28\xde\x2e\xdf\x14\x3f\x85\x67\xda\x94\xb6\x78\x07\xe1\x3d\x40\xc1\x9a\x6b\x0c\xef\x15\xb6\x24\x6b\xeb\xd5\x4a\xb4\x7a\x75\xff\xf3\x1a\x59\xac\x1a\x61\x74\x89\xc4\xcb\xd6\x59\xb6\x51\x1e\xa0\xb8\x47\x47\xda\x9a\x20\x95\xfe\x05\x63\x19\x08\xb9\x58\x00\x3c\xc6\x5d\xa4\x35\xe4\x1b\xa4\xe2\x1d\xfc\xdd\x49\x89\xb6\xad\xb5\x14\xac\xad\x59\x7d\x26\x6b\xc2\xda\x9b\xb8\xb6\x75\x56\x79\x39\x73\xad\xe0\x8a\x0e\xf0\x87\x40\x0f\xaf\xc2\x5a\x4b\x9c\x7d\x0f\xfe\xf0\x4d\x23\xdc\x36\x20\xff\xc4\xd6\x21\x08\x29\xb1\x65\x82\xe0\x14\xd7\xc4\x0d\x41\xac\xad\x67\x50\x9a\xa4\xbd\x47\x87\x0a\x76\xca\xa1\xd4\x35\x12\x08\xa3\xa0\x0d\x76\x13\x13\x70\x85\xcd\x32\x39\x26\x6e\x61\x5b\x74\x51\xcf\xef\x2a\x6c\xf3\x31\xc9\x86\xed\xc4\x06\x3f\xa1\xbb\xd7\x12\x6f\xe3\xee\xb9\x98\x43\x6a\xad\x21\xa4\x1e\x60\x80\xe2\xed\x9b\x37\x83\x47\x10\x82\x45\xd2\xe9\x96\x53\x14\xde\x03\x79\x29\x91\xa8\xf4\x35\xec\x34\xe5\xa8\x3a\xe3\x65\x85\x8d\x38\x52\x06\x50\xfc\xdf\x61\x19\xf4\xfc\x6f\xa5\xb0\xd4\x46\x07\xbd\x94\x5c\x1b\x91\xfe\x99\x74\x16\x3d\xc9\xc7\xec\xdb\x63\xbe\x59\xa1\xb0\x14\xbe\xe6\x69\xe0\x06\xbc\xc1\xaf\x2d\x4a\x46\x05\xe8\x9c\x75\x7b\xfc\xd7\xc2\x77\xde\xb0\x6e\xf0\x43\x50\x7a\x06\xf7\x62\xc4\x82\xa2\x15\x4e\x34\xc8\xe8\x0e\x39\xd9\x7d\x06\xe6\x18\xd1\x44\xf2\xac\xad\xda\x0e\xf1\x6a\x73\xea\x8d\xc3\x2f\x5e\x3b\x0c\xf9\xc1\xce\xe3\x73\x86\xe9\x8b\x47\xe2\x39\xd6\xde\x64\xd6\xb2\xd8\x0c\xed\x3c\x91\xb7\x07\xcd\x37\x8b\x5c\x63\xf2\xdd\x31\x1d\x57\xf8\x95\x9d\x90\x3c\x9b\x96\x1f\xba\xf5\xd0\x0a\x47\x48\x40\x3e\x54\x02\x54\x19\xf5\x1c\xb2\x77\x86\x80\x58\x18\x25\x5c\x78\xd0\x3a\x24\x34\x1c\x69\x47\x60\xcb\x3d\x63\x69\x0e\x35\xd3\x96\xda\x9a\x1d\x3b\xd3\x93\x57\xc1\xcf\x84\xf5\x07\x43\xd3\xe7\xc5\x32\x74\x1f\xa8\x67\xe7\xe8\x51\x02\x5f\x4e\xd3\x46\xb0\xac\x66\x93\xf4\x63\x58\x0d\x51\x06\x29\x51\x93\x2b\xc1\xf0\x80\x91\xb1\xd6\x31\x24\xe2\x6b\xb3\x01\x69\x0d\xa3\x61\x28\x9d\x9d\xd5\x2b\x8f\x09\x19\x37\x7c\x15\x74\x8c\x48\x7f\x90\x31\x7d\x5e\x2c\x19\x53\x98\xbe\x23\x15\xf7\x93\x72\x06\xee\x30\xd7\xc6\x79\x7b\xed\xcb\xf7\x66\x9b\xb3\x92\xb7\x6d\x74\xa0\x5d\x7f\xc6\xac\x3f\x85\xe5\x2d\x3a\xd6\x03\x3e\xc4\xf5\xb7\xde\xd5\x43\x96\xec\xf4\x10\x3b\x6d\x36\xc5\x68\x50\xef\x45\xed\x71\x42\xb0\x97\xc5\xdd\x04\x1d\xa3\xb8\xe5\xcc\xf0\xc7\xd1\x1a\xd4\xcb\xb7\x2b\x4c\xc4\x81\x82\xd9\xf6\x49\xab\x4e\x9a\xa7\x0d\x63\x38\x37\x9d\xb0\x4f\x1b\xfe\xe5\xed\xb8\xd6\x06\x89\xc4\x66\xca\x6f\xa3\xa2\x0a\x59\xe8\xfa\xa8\xa2\xed\x44\x85\x73\xa2\xcf\x8d\x42\x33\x36\xc3\xf5\x27\x13\x3f\x4f\xa9\x71\x46\x8f\xc6\x69\xb4\x79\x5d\x11\x2f\xc2\x50\x2d\xf8\x69\x31\x0b\xad\xe6\x36\xb5\x93\x93\x8e\x1a\x20\x89\xef\x84\x52\xd1\x0d\xa2\xfe\x63\x1c\xd7\x59\x08\xa7\xea\x1e\x59\xef\xe4\x65\x04\x5b\x0c\xb4\x0c\x4b\x7c\xdf\xd1\x80\x46\x8a\x96\x7c\x2d\x18\x09\x52\x21\x6c\x82\xf1\x50\x5a\x17\x0e\x9f\x70\x97\x24\xee\x60\xdf\x4d\x97\xc5\xb9\x08\xa6\x76\x71\x45\x08\x77\x63\xc3\x6d\xec\xfc\xdf\x2a\x5f\x77\x85\xba\xdb\xeb\x37\x5d\xe3\x44\xda\x4e\xba\xb4\xb3\x7c\xe8\xd3\xf4\x54\x09\x16\x17\x3b\x75\x87\xee\x57\x6c\xd1\x28\x34\xf2\xaa\x6a\x9d\xda\xe3\xec\x82\x3b\xb0\xf3\xaf\x0a\x21\xa8\x08\x07\xa0\x60\x84\xda\x83\x5a\x9e\xa8\xf0\xdd\xe5\x4d\x20\x14\xb1\x13\xda\x0c\x27\x90\x4b\x77\xdf\xdd\x06\x1d\x14\x82\x48\xe7\x37\xc1\xc1\xd5\xb6\xf6\x99\x2f\x87\x78\x48\xda\xf6\x39\xf2\xe9\x0c\x8d\xa7\x2c\xe8\x20\x04\xb4\x0f\x95\x96\x15\x70\xa5\x29\x73\x24\xe8\x3d\x0b\xd5\x72\xaa\xc3\x8d\x24\xf0\x15\xc9\x51\x0b\xb3\xf1\xd3\x9d\x65\xca\xc0\x9d\x1a\x10\x44\x56\x6a\x11\x06\xc9\x07\xcd\x55\xcc\x98\xde\x45\xd7\xa9\x20\x6d\x89\xb1\xb9\x12\x45\xe6\xd1\x46\x18\xb1\x89\x35\x0d\x3a\xd5\x23\xc8\x34\x9d\x45\x34\xb7\x0a\x4f\xa1\xd2\x0a\x0d\xeb\x32\xa4\x6b\xa7\x13\xbc\xab\xe3\xa9\x65\xb6\x77\x9e\x99\xc2\x8d\x55\xbe\x1e\x8b\x95\xa6\x59\x70\x0e\x37\xb5\xcf\x41\xeb\x3e\xa8\xfd\xb5\x0b\x2a\x58\x6f\xe7\x63\xda\xc7\xfe\xb8\x05\x7f\xa3\xde\x91\x55\xe7\x4b\x6a\x41\xe6\xf5\x1c\x73\x6a\x12\xe7\xac\x9d\xea\x48\x79\x4d\x38\xf8\x91\x40\x44\x4d\xf0\x50\xd9\x43\x2e\x52\x6f\xf3\x13\x5d\x28\x3b\xcc\x7c\xaf\xd1\xac\x7f\x31\xff\xe4\x78\xce\x1a\xc1\xa6\xfd\x7b\x70\xc8\x9c\x11\x2a\xae\x9f\xee\xf5\xf9\xc9\xfe\xaa\xf1\x89\x65\x85\xea\xf6\x05\x7a\xec\x82\x09\x69\x96\xcf\x7a\xb7\xd2\x57\xb8\xec\x89\x47\xd8\xae\x36\x5c\x2c\xf6\x8f\x36\xea\x29\x72\xaf\x6c\x2e\xce\x83\x03\x14\xbe\x8c\xfd\x0e\xd6\xff\xf1\xeb\x5c\x94\xe7\x33\x63\x1c\xc8\x58\xf2\x09\xb3\x1d\x26\xe0\xae\x1d\xdf\x45\xb1\x91\x0c\x5c\x84\xbf\xc7\xc5\x7f\x01\x00\x00\xff\xff\xb1\xfa\x0d\x06\x01\x1d\x00\x00")

func depscloudApiV1betaManifestSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_depscloudApiV1betaManifestSwaggerJson,
		"depscloud/api/v1beta/manifest.swagger.json",
	)
}

func depscloudApiV1betaManifestSwaggerJson() (*asset, error) {
	bytes, err := depscloudApiV1betaManifestSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "depscloud/api/v1beta/manifest.swagger.json", size: 7425, mode: os.FileMode(420), modTime: time.Unix(1607497979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _depscloudApiV1betaRpcSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4f\x6f\xdb\x3a\x12\xbf\xe7\x53\x0c\xb4\x7b\xd8\x05\x82\xb8\xdb\xbd\xf5\x96\xc5\x2e\xba\x0f\xc8\x03\x8a\xa4\x3d\xbd\x14\x06\x45\x8d\x64\x36\x12\xa9\x0e\x47\x49\xfd\x0a\x7f\xf7\x07\x52\x92\x2d\xc9\x92\xff\xc9\x49\x63\xc4\x3e\x29\x26\x39\x9a\x19\xfe\xe6\xc7\x99\xa1\xf3\xf3\x02\x20\xb0\x4f\x22\x49\x90\x82\x0f\x10\xbc\xbf\x7a\x17\x5c\xba\xef\x94\x8e\x4d\xf0\x01\xdc\x38\x40\xc0\x8a\x53\x74\xe3\x11\xe6\x56\xa6\xa6\x88\x26\x22\x57\x93\xc7\x7f\x85\xc8\x62\x42\xb9\xbc\xca\xc9\xb0\xf1\x4b\x01\x82\x47\x24\xab\x8c\x76\x0b\xaa\x47\xd0\x86\xc1\x22\x07\x17\x00\x0b\xff\x02\x69\xb4\x2d\x32\xb4\xc1\x07\xf8\xa3\x5c\x25\xf2\x3c\x55\x52\xb0\x32\x7a\xf2\xcd\x1a\xed\xe6\x7e\xf5\x73\x73\x32\x51\x21\x77\x9c\x2b\x78\x66\x57\x9a\xd7\x3a\x66\x26\x2a\x52\x5c\x0d\x00\x04\x09\x72\xe3\x4f\x80\xc0\xe4\x48\x5e\xe4\x6f\x91\x53\xfd\x77\xbf\xe4\x0e\xe9\x51\x49\x9c\xde\x28\xcb\x95\x7d\x7e\x32\xa1\xcd\x8d\xb6\x2d\x91\x7e\xe0\xfd\xbb\x77\x9d\xaf\xc0\xf9\xcd\x4a\x52\x39\x57\x5e\xb9\x06\x5b\x48\x89\xd6\xc6\x45\x0a\xb5\xa4\xab\x86\x78\xbf\xc8\xca\x19\x66\x62\x4d\x18\x40\xf0\x77\xc2\xd8\xc9\xf9\xdb\x24\xc2\x58\x69\xe5\xe4\xda\xca\x54\xa7\x68\xa9\xba\xbd\xad\x24\x07\xad\xf5\x8b\xc6\x5f\x8b\xe6\x2b\x83\x08\x63\x51\xa4\xbc\x5d\x7d\x0d\x85\xc6\x1f\x39\x4a\xc6\x08\x90\xc8\xd0\xd2\x8a\xb1\x46\x50\xa1\x59\x65\xf8\x3f\x27\x74\x83\xde\x17\x3d\x16\x04\xb9\x20\x91\x21\x23\xad\x90\x52\x7e\x3a\xe6\x68\x91\x79\x34\xe7\x82\x50\x73\x57\x63\xe5\x6d\xfc\x5e\x20\xcd\xbb\x43\x84\xdf\x0b\x45\xe8\xe0\x11\x8b\xd4\x62\x67\x98\xe7\xb9\x97\x6b\x99\x94\x4e\x82\x21\x3f\x0f\x6a\x93\xe0\xd4\xaa\x3f\xd7\x5c\x38\x5e\x21\xa5\x19\x5d\x84\x77\x86\x63\x43\x99\xe0\x6a\xc2\xbf\xdf\x1f\xa4\x30\x9b\x07\xd4\x2f\xe2\xc2\xe5\xf3\xd7\xc6\x96\xb3\x48\xba\x9b\xdd\x0e\xdc\x95\x88\xaf\x17\x4d\x41\x95\x81\x5d\x82\x98\xfc\x2c\x1f\xae\x52\xa1\x93\x42\x24\xb8\x58\x7e\xe3\xcc\x5e\x4c\x22\xcc\x51\x47\xa8\xa5\xda\x8f\x4d\x3e\x93\x70\x5c\x28\xd2\x9a\x50\x3e\x22\xff\xb7\x29\xeb\x14\xb8\xa5\xa9\xf0\x99\x5c\xaa\xcf\x40\x74\x74\x70\xd4\x55\xbd\x63\xf5\xe7\x19\x42\x3d\x15\x84\xb5\x46\x2a\xe1\xec\x7f\x52\x3c\x03\x9e\x21\x54\xe2\xfa\x23\xcd\x1d\x7a\x1b\x02\x8d\xa9\x38\x2e\x55\x35\x22\x62\x07\xbb\xdc\x34\x30\xb1\x37\xa3\x71\x70\x83\x21\x48\x55\x48\x82\xe6\x2f\x61\xd6\xce\xf4\xd1\x8d\xd4\xe7\x62\x10\x3e\x1a\x7f\xf0\x69\xb1\x07\x9f\xb9\xa3\xfe\x9c\xb9\x63\x8b\x5d\x67\xee\x68\x71\x87\x35\x05\xc9\xb1\x65\xcc\x5d\x25\xe4\x14\x38\xc3\x57\x33\x42\x8b\x04\xa3\x4a\xed\x33\x77\x54\x9f\x33\x77\x6c\xb1\xeb\xc4\xb8\xe3\xa0\xb2\xe5\x00\x42\x28\xe3\xe8\x24\xfb\x1a\x67\x0a\x38\xf7\x35\xde\x6e\x5f\xa3\x15\xb8\x7b\x12\xc4\xe4\x67\xf9\x70\x55\x50\xba\x38\xa4\x1b\xba\xce\x1a\x55\x93\xf1\x64\xc8\xa3\x4a\x23\xce\xbd\xd1\x9d\x38\x64\x05\x97\x2d\x27\xed\x35\x94\x98\x86\x32\xea\x9c\xd5\x9f\xc8\x3c\xaa\x08\xe9\xcb\xed\xcd\xeb\xc8\x1b\x2a\x63\x1e\x94\x8e\x76\xc8\x1b\xdc\x34\x97\x37\x94\xab\x2e\x81\xe7\xb9\x92\x22\x4d\xe7\x40\x98\x1b\xab\xd8\xd0\xdc\x25\x11\x82\x58\xc5\x42\xba\x3f\xaf\xe0\xf3\x4c\x59\x78\x12\x16\x1e\x30\xe7\x7b\x6d\xd1\x39\x9c\x11\x62\x32\x99\xcf\x40\xbe\xdc\xde\x80\xb0\x60\xe7\x96\x31\xb3\x90\xaa\x07\x84\x8f\x8a\xff\x5f\x84\x20\x74\xe4\x1e\x6f\x44\x08\x26\x8e\x91\xc0\x9a\x0c\xef\x75\x2d\x1f\x6c\x91\xe7\x86\x78\x20\x5b\x79\xdd\x74\xb4\xbc\xf0\x69\x00\x79\x75\x3d\xe3\xaf\x8d\xc2\x22\xbe\xd6\xf3\x26\x19\xd5\xea\x99\xf0\x1b\xca\xd5\x41\xe6\xa6\xe7\x48\xac\x3a\x04\xe3\xe7\x4f\x1d\x54\x3b\xb4\x33\x64\x66\x33\x30\x1e\x45\x5a\xe0\x96\x85\x2d\x26\x58\x9d\x2e\xe1\x9c\x1b\x86\x2f\x7a\x79\xb8\x15\xb3\x23\x4c\xc4\x8e\x80\x9d\xed\x93\x26\x1a\x34\xaf\xef\xfc\x1c\x3e\x3d\x9b\x52\x33\xb4\xd6\x55\x17\x07\x28\x14\x21\x0b\x95\xae\x1d\x11\xf5\x52\x41\x24\xda\x70\x0e\x94\x8b\x98\x75\xe6\xed\x27\xc9\x26\xa4\xfa\x59\x71\xd3\x3e\xdd\x31\xa1\xc8\x46\xef\x56\x42\xb9\x9c\x3e\x8f\xe7\x67\xcc\xf9\x33\x89\x1e\xb1\xa9\x5e\x2b\xcb\x82\x8b\xc1\x8d\x3d\x3d\x4c\x6c\xb8\xf4\x18\x81\x8d\x81\x1b\xa4\xa3\x1a\xdc\xd1\x7c\x8c\xd5\xa3\x88\xb9\x4c\x34\xbb\x56\x6e\xd2\xb9\x4c\xcf\xfa\x51\x82\x51\x82\xd3\x48\x70\x37\x65\x3a\xb2\xdb\x4a\x15\x8e\xe1\x3c\x3e\x2a\x60\xf8\x15\xc3\x65\x43\x82\x3d\x1a\x3e\xcf\x6c\x76\x4b\xed\x51\x96\x77\xdb\x13\x23\x2c\x5f\xef\xeb\x3c\x9f\xe5\xa5\xda\x07\x5a\x7e\xbc\xcd\xd6\xf8\x83\xa7\x8d\xda\xfb\x80\x63\xe4\x65\xf0\x32\x02\x28\x47\x44\xc8\x11\xdc\xf5\x22\x20\x3b\x14\x5d\xed\xb0\x7c\x6b\x67\x50\xe9\xb5\x43\xa1\xd6\x0e\xec\xd1\x34\xb4\x8f\xef\xba\xdb\x7d\x7a\xbe\x1b\x0d\xb8\xe5\xd5\xcb\x1e\x45\xe5\xa1\xd7\x32\xbd\x7e\xae\xda\x1e\x63\x5e\xbe\xcb\xdd\x49\xef\xbb\x53\x11\xe2\x70\x22\xdf\x71\xa1\x1f\x13\x51\xe4\xb7\x4f\xa4\x9f\xfa\x1d\xda\xa7\x7f\x73\x5b\x5b\xd2\x96\x3f\x55\xbd\xf1\x8a\x80\x34\x9a\x85\xd2\xb0\x7a\x0b\x64\xc8\xc2\xa1\x10\x44\x68\x0a\xf6\x26\xa2\x66\xc5\xf3\x9e\x5a\x7e\xb9\xd9\x6b\x5d\xaf\x72\x07\x40\x69\x58\xfe\x28\x16\x94\x05\x01\x09\x6a\x24\x25\x81\x30\x27\xb4\xa8\xb9\xf2\x5c\x0c\x42\x6f\xf6\x65\x1f\x10\x8f\x93\x87\x97\xd1\x72\x28\x20\xae\x81\x30\x46\x42\x2d\x11\xd8\x94\x98\x58\x61\x72\x99\x9e\xd6\x2e\xf9\x47\xfd\xa3\x5f\x43\x10\x92\xd0\x72\xf6\xcf\x01\xb0\x54\x13\xa7\xd2\x68\xcb\x24\x94\xee\xf6\x57\xf7\x85\x6d\xfd\xe6\x95\x40\xf0\xfc\x80\x11\x84\x73\xaf\x78\x4e\xc6\xb9\x6c\x40\x21\x2b\x4d\x7e\x8c\x03\x71\x57\xb4\xf6\x98\x50\xaa\x00\x82\xe1\x69\xa6\x64\x19\xed\x84\xdf\x0b\xb4\xce\xd9\x35\xea\x2c\x68\xc4\x08\xa3\xb7\x1d\x85\xdd\x10\x81\x72\x3c\x44\x5b\xb9\x2d\xf5\x91\x66\x67\x2a\x87\x10\xf9\x09\x51\x03\x3f\x99\xca\x8b\xf6\x0a\xfe\x83\x52\x14\x16\xef\xb5\xa7\x3a\x65\x41\x2a\x92\x45\x2a\xa8\xb5\xf6\x12\x98\xc4\x52\x71\xa7\x74\x28\xac\xe7\x60\x4c\x95\x4e\xdc\x6e\x44\x2a\x8e\x95\x2c\x52\xee\x0d\xe5\x3b\x14\x24\x67\xb7\xe5\x2e\x8e\x89\x63\x29\xb4\xc4\xc1\x36\x67\x68\x4c\x8a\x42\x0f\xb6\x2b\xab\xe1\x4d\xa9\xf3\x34\x5e\xef\x32\x1e\x50\x42\xb4\x7b\x3b\xab\x7e\xc7\xbe\xe2\xfb\x4a\xd2\x3e\xd9\x6c\xa7\x66\x8d\xe1\xc6\x08\xae\x52\xe3\x3d\xa5\x0e\x94\x92\x9b\xd2\x8d\x1a\x1a\xe3\x0b\x02\x5a\x83\xd7\x56\x7d\xdb\xb8\xfc\x85\x25\xd5\x0e\x25\xf8\x00\xa2\x7e\x71\x4b\xa4\x17\x8b\xaf\x47\xa7\x53\x68\x23\x8c\xaf\x52\xfc\xbd\xde\xb8\xc4\xe1\xf5\xde\xf9\xf5\xee\xeb\xf6\xbb\xae\xfe\xe3\x78\xcb\x65\xed\x5b\xce\x25\xae\xab\xbd\x6f\x67\xf4\xcb\x24\xde\xba\xec\xdd\x90\x4a\x94\x76\xce\x03\xa5\x4b\x17\x2a\xa3\x2b\x20\x28\x2d\xd3\x22\x42\x7b\x79\xaf\xc3\x82\x7d\x8a\x66\x18\x52\x95\x29\xe7\x66\x36\x97\x2b\x28\x29\x97\xe0\xe9\xa8\x81\x26\x85\xb6\x3f\x73\x68\xd6\xb2\x23\x42\x64\xf5\x2f\x79\xc7\x48\xaf\xf7\xae\x48\xcb\x08\x18\xf9\xf6\x52\x08\x14\xd6\xbb\x13\x32\x4f\x3b\xd0\x3c\x0c\xfc\xce\x38\x65\x58\x50\x82\xbc\x59\xa7\xd3\xc4\x75\xed\x7a\x65\xf4\x1e\xe0\x6e\xc2\x68\x97\x24\x59\xd4\x75\x52\x09\xd3\xb6\x23\xfd\x9d\xfe\xc5\xe2\xe2\xaf\x00\x00\x00\xff\xff\xef\xdf\x49\x58\x3d\x3a\x00\x00")

func depscloudApiV1betaRpcSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_depscloudApiV1betaRpcSwaggerJson,
		"depscloud/api/v1beta/rpc.swagger.json",
	)
}

func depscloudApiV1betaRpcSwaggerJson() (*asset, error) {
	bytes, err := depscloudApiV1betaRpcSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "depscloud/api/v1beta/rpc.swagger.json", size: 14909, mode: os.FileMode(420), modTime: time.Unix(1607497980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _graphstoreApiV1betaGraphstoreSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x98\xd3\x1d\xd0\xe4\xd6\x27\xa7\xe9\xe1\x1e\xb2\x08\x70\xc5\x6e\xbb\xdb\x45\xb7\x1b\xb4\xc9\x53\x15\x24\x94\x34\xb2\xb9\x91\x48\x95\xa4\x9c\x6a\x8b\x7c\xf7\xc3\x90\x92\x25\xcb\x76\x9c\xd4\x49\xdb\x5c\x19\xa0\x68\x22\x51\xc3\xdf\xfc\xfd\x0d\x45\xc9\xfe\xb4\x03\x10\xe8\x2b\x36\x99\xa0\x0a\x0e\x21\x38\x08\xf7\x83\x11\x1d\xe3\x22\x93\xc1\x21\xd0\x79\x80\xc0\x70\x93\x23\x9d\x9f\x28\x56\x4e\xb5\x91\x0a\xc7\xac\xe4\xe3\xd9\xd3\x18\x0d\x1b\x77\x47\xc3\x52\x49\x23\xad\x08\x80\x60\x86\x4a\x73\x29\xe8\xc2\xe6\x57\x10\xd2\x80\x46\x13\xec\x00\x5c\xdb\x89\x12\x29\x74\x55\xa0\x0e\x0e\xe1\xbd\xbb\x8a\x95\x65\xce\x13\x66\xb8\x14\xe3\x3f\xb5\x14\x34\xf6\xcc\x8e\x2d\x95\x4c\xab\xe4\x96\x63\x99\x99\xea\x4e\x83\x05\xa8\xf3\xc3\x00\xc1\x04\x4d\xef\x4f\xb2\x46\x55\x14\x4c\xd5\x04\xfa\x54\x63\x0a\x46\x42\xce\xb5\x81\x94\x19\x06\x57\xdc\x4c\xb9\x00\x33\x45\x70\xfa\x36\xaa\xda\x2b\x65\x89\xca\x42\x79\x95\xd2\xd5\xbf\xd0\x54\xef\x68\xd4\xf9\x6b\xae\x4d\x7f\xa4\x42\x5d\x4a\xa1\x51\x2f\x4c\x0d\x10\x1c\xec\xef\x0f\x0e\x01\x04\x29\xea\x44\xf1\xd2\x34\xa6\x7c\x0e\xba\x4a\x12\xd4\x3a\xab\x72\x68\x25\xf5\x81\x38\x35\x92\x29\x16\x6c\x49\x18\x40\xf0\x0f\x85\x19\xc9\xf9\xfb\x38\xc5\x8c\x0b\x4e\x72\x75\x63\x1f\x02\xfa\xb6\x11\x19\x2c\x5c\x78\xdd\xfb\xeb\xba\x3f\x57\x90\x62\xc6\xaa\xdc\x6c\xc6\x2d\xa0\x12\xf8\xb1\xc4\xc4\x60\x0a\xa8\x94\x54\x73\xf8\xdb\xa2\x57\x95\x30\xbc\xc0\x17\x24\xf4\x06\xdc\x3b\x2b\x34\x08\x4a\xa6\x58\x81\x06\x55\x17\x57\xee\x67\xa0\x8e\x60\x85\xcd\x81\x92\x29\x14\x66\x88\x98\x5b\x1d\x3f\x54\xa8\xea\xe1\x29\x85\x1f\x2a\xae\x90\x82\x22\x63\xb9\xc6\xc1\x69\x53\x97\x56\xae\x36\x8a\x8b\x49\xb0\xce\xce\x6b\xd1\x4c\xf0\x5c\xf3\xbf\x96\x4c\xb8\x3d\x20\x2e\x0c\x52\x5d\x18\x9c\xce\xa4\x2a\x98\x69\x06\x3c\x3b\xf8\x2c\xc0\x46\x5e\xa2\xf8\x56\x4c\x78\xc9\x45\xfa\x45\xb0\xcc\x7f\x3f\xeb\x85\x9f\x61\x93\x61\xe0\xf5\x4a\x47\x77\xfd\xd9\xce\x40\xa3\x20\xc5\x1c\x0d\x6e\xac\x5e\x6e\x98\xab\x5f\x99\x92\xc5\x9d\xab\xd7\xcf\x6e\x9e\xc7\x50\xbf\x1c\x54\x5f\xc1\x9a\x9f\x35\x01\x1f\xcb\x74\x29\xaa\x5d\xc0\xaf\x3a\xd3\x8b\x77\xa3\xaa\x61\xb8\x6f\xe7\xa7\x0f\x15\x6a\x73\x1b\x75\xef\x27\x63\xca\x6a\x33\xd9\x73\xa1\x51\x35\x74\xcf\x85\x91\x77\x4e\x97\xe3\xea\x71\x70\xfd\x71\xe5\xa9\xbe\xfd\xf9\x66\x13\xc5\x3a\xe9\xcb\x64\xc9\x4e\xcf\x5a\x8b\xfd\xf2\xf8\x13\xf1\x46\x78\x89\xf5\xf5\x58\x20\x9f\x4c\x63\xa9\xf4\x98\x8e\xdd\xb5\x93\xb6\x84\xba\x55\x2b\xfd\xa6\x9d\xff\xe0\x51\x24\xd9\x1c\xae\x4f\xb5\xe6\x67\x4d\xaa\xb5\x11\xb6\x3a\xdd\x68\x35\x77\xb7\x74\x1b\xb4\x61\x6b\x7b\xd8\xb8\x36\x78\xd7\x86\x51\xc8\x14\x43\xaa\x00\x21\xcd\x72\x5e\xa9\x7c\x28\x7f\x29\xc2\x4e\xdf\xbe\x1e\x2b\xd4\xb2\x52\x09\x02\xc9\x01\x33\x65\x06\x2a\xc1\x3f\x54\x98\xd7\xc0\x53\x14\x86\x67\x1c\xb5\xcd\x08\x92\x0b\x32\x73\xd9\x81\x8a\xb3\x9c\xff\x85\x69\x24\xec\xf2\x3a\x91\x39\xc4\x55\x96\xa1\x82\x02\xb5\x66\x13\x0c\xe1\x64\xca\x35\x38\x5d\xa1\xa8\xb4\x81\x44\x0a\xc3\xb8\x00\x66\x20\x47\xa6\x4d\x24\xa4\x40\x88\x82\x71\x14\x40\x32\x65\x8a\x25\x06\x15\x5d\x87\x90\x33\x4d\x8b\xf2\x49\x81\xc2\xb4\x93\x9e\xbe\x7d\xfd\x44\x03\x99\xdd\x89\x53\x58\x2a\xd4\x28\x4c\x24\xe8\x74\x56\xe5\x79\x0d\x1f\x2a\x96\x13\xe6\xd4\x69\xd4\x5c\x6a\xb1\xef\x32\x0d\x5c\x44\xe2\x82\x44\x8c\x27\x52\x4e\xf2\xe6\xe6\x40\x5c\x65\xe1\xcf\x95\xcb\xee\x8b\x3d\x87\xc0\x5e\xae\xa7\xb2\xca\x53\x88\x11\x08\x36\x24\x4c\x48\xc1\x13\x96\x03\x39\x2b\x12\xbb\x18\x4e\xc2\x11\x29\x93\x92\x92\x51\x10\x46\x01\x70\x6d\xef\x28\xb0\x24\xc1\xd2\x60\xba\x17\x46\x22\x12\xaf\x04\x94\xa4\x1f\x4f\x70\x04\x06\x59\xa1\xa1\xd2\x15\x23\xc4\xa5\xc2\x44\x16\x25\xcf\xb1\xe3\xf6\x98\x0b\xa6\x6a\x60\x79\x6e\xa1\x6b\xe7\x19\x33\xc5\x3a\x6a\x12\x0b\xb8\xa1\xe2\x55\x69\x0b\x8d\xae\x21\xeb\xe2\x47\x6b\xad\xe7\xa2\x0e\xe1\x57\x79\x85\x33\x54\x23\xc2\x4a\xb6\xd3\x70\x35\xe5\xc9\xd4\x5e\x62\xa6\x18\x09\x9b\x7a\x08\x17\x53\x63\xca\x8b\x91\xfb\x5f\x5f\x8c\x40\x2a\x10\x12\xdc\xd9\x11\x90\x8b\x12\x26\x40\xda\xc8\xb1\x88\x35\x1a\xa8\x4a\x60\x16\x5b\x44\xbd\xc9\x0c\x95\x83\x58\xb0\x52\x3b\x6b\xdb\x19\x8d\x6c\xc3\x01\x7a\x49\x0c\x4c\x43\x26\xf3\x5c\x5e\xe9\x43\x32\xce\x3f\xe1\x55\xd6\x4d\x49\x06\x2c\x95\x9c\xf1\x14\xd3\x39\x2a\x3a\xc8\xb4\xae\x0a\x4c\x43\xba\xe0\xb9\x80\x5f\x4f\x4e\x8e\xe1\x97\x17\x27\x20\x45\x1b\x1e\x2e\x2e\x6a\x8e\x79\x0a\x0c\xde\x0f\x5d\x7c\x52\x97\x78\xf6\xfe\x2c\x12\x00\x33\x96\x57\xd6\x72\x8d\xa5\x5d\xf2\x59\xdd\x9b\x3b\x3a\xc0\x84\x2b\x5d\x6e\xbe\xee\xa6\x8e\x06\xa6\x90\x5c\x23\xaf\x1c\x81\x24\x2c\xa1\x88\x95\xf2\xb2\x2a\xa9\xce\x55\xb9\xd1\x10\x33\xa2\x17\x07\x8d\x26\x3c\x7d\xfb\xda\x4a\x9f\xb2\x99\x35\x7f\xd1\xf3\x7b\xea\x1c\xcf\x5a\x30\xf4\xfb\x4c\xf2\x14\x98\xa8\xe9\x5a\x27\xda\x86\xa5\xc2\x4c\x2a\x1c\xb5\x23\x49\x00\x33\x3c\xe6\x39\x37\x35\x08\xc4\xd4\xda\x3c\x46\xb0\xa9\xa1\x66\x94\xa0\x40\x30\x92\x29\x13\x13\xb4\x67\x6d\x44\x85\xb0\x7b\xaa\x11\x9a\x7b\x60\xa4\x08\x39\x8d\x82\xde\x79\x8d\x09\x36\xb1\xc0\x63\x85\xec\x92\xa2\xbb\x91\x10\xee\x91\xcb\xde\x48\x83\x87\x60\x28\xc3\xb3\x4a\x24\x2e\x34\x08\x43\x13\xfd\x49\xa5\x14\x0a\x93\xd7\xc0\x66\x8c\xe7\x2c\xce\xe7\x71\x2a\xb3\x8c\x27\x9c\xe5\x4d\xe5\x88\xab\x0c\x14\x52\x3d\xc0\x11\x30\x91\x52\x60\x37\x42\x2a\x32\x21\x45\x6f\x17\x50\x31\x4e\xb8\x10\x04\x87\xb8\x3a\x12\x74\x26\x74\x7e\x66\x25\xd7\x61\x22\x0b\x9b\x6f\xef\x6c\x28\x69\x90\x66\xea\x42\x53\x0c\xe3\x1c\x76\x49\xf0\x14\x01\x8b\xd2\xd4\x4d\xec\xed\x41\xc1\x27\x53\x03\x31\x46\xc2\xce\x4e\xb3\x00\x2f\xca\x1c\xa9\x12\x59\xff\x83\x2e\x31\xe1\x19\x4f\x40\x63\xc1\x84\xe1\x89\x5e\x22\xe6\xaf\x75\xdb\xa0\x63\x01\x1b\xe0\x1b\x28\xe0\x77\xca\x96\x18\x81\x51\x3a\xf0\xb4\x57\xd5\x61\x58\xd4\x9b\x3a\xca\x62\x39\xc3\xd6\x00\x4d\xd0\x3c\x9c\xf2\xf7\x4a\x90\x96\xcc\x3d\x41\x7a\x82\xf4\x04\xe9\x09\xd2\x13\xe4\x77\x4a\x90\x1d\x0b\x78\x82\x1c\x98\xc6\x48\x4f\x8f\x9e\x1e\x3d\x3d\x7a\x7a\xf4\xf4\xf8\xbd\xd2\x63\xcb\x01\xdf\x17\x39\x3e\xfc\x5e\xc5\x25\x17\xe9\xf5\x57\x79\xc4\xe7\x71\x6c\x49\xf8\x67\x7c\x36\xe7\xe6\xfa\x47\x42\xb6\xde\x89\xb8\x63\x95\xf0\x4f\x1b\x3d\xa6\xa7\x8d\x1e\xbe\xba\xd9\xbb\x8e\x8b\x3b\xb1\x5f\x71\x13\xf6\x51\x14\x3c\xbf\x07\x7b\xcb\xaa\xd7\xc6\x96\xdf\x83\xf5\x6b\x68\xbf\x86\xf6\x6b\x68\xbf\x86\xf6\x6b\xe8\x6f\x7b\x0d\xed\xf7\x60\xfd\x1e\xac\x27\x48\x4f\x90\x9e\x20\x3d\x41\x7a\x82\xbc\x91\x05\x3c\x41\x0e\x4c\xe3\xf7\x60\x3d\x3d\x7a\x7a\xf4\xf4\xe8\xe9\xf1\xfb\xa5\x47\xbf\x07\xdb\x49\xbb\xcf\x5d\x0a\x23\x87\x6f\x8b\x19\xf9\x15\xb7\x29\x9e\xf9\x7d\x8a\xff\xa7\x7d\x0a\x17\x5d\x7e\x97\xc2\x77\x99\xbe\xcb\xf4\x5d\xa6\xef\x32\x7d\x97\xf9\x6d\x77\x99\x7e\x97\xc2\xef\x52\x78\x82\xf4\x04\xe9\x09\xd2\x13\xa4\x27\xc8\x1b\x59\xc0\x13\xe4\xc0\x34\x7e\x97\xc2\xd3\xa3\xa7\x47\x4f\x8f\x9e\x1e\xbf\x5f\x7a\xf4\xbb\x14\x9d\xb4\xcf\xdb\xa5\x98\x7f\xdc\x74\xaf\x5e\x75\x1f\x0e\xdd\x46\xec\x73\x51\xf7\x37\x29\x5a\xe4\x32\xfe\x13\x93\xee\x15\x1c\x1a\x5e\xa2\x32\x7c\xb0\x83\x10\xcc\x29\x7a\xb0\xaf\x70\x83\x05\x3c\x7d\x7b\xfa\xf6\xf4\xed\xe9\xdb\xd3\xf7\x43\xd0\xf7\xca\xcd\x46\x47\xa2\x77\x28\xd1\x03\x8a\xba\xa9\x7c\xdf\x17\xf9\xee\x0c\x49\xb0\xff\xa1\xdf\x0b\x33\x5e\x3c\x17\xf5\x45\x5b\xc3\x35\xa5\x07\x53\x31\x37\x8a\xe2\xf0\x86\xd9\xdb\xfc\x67\xb9\x6c\xbc\x06\x2c\x12\x94\xac\xb6\x60\xb8\x49\xe2\x1b\x39\x66\x4e\x29\xe4\xd9\xe3\x36\x68\x72\x1e\xdb\xb9\x9b\x5a\xa1\x41\x57\x65\x29\x95\x2d\x8b\x25\x4b\x2e\xc7\x95\xa0\xff\xa8\x18\xba\x74\xd7\x6d\x04\xba\xe2\x2d\x33\xa8\x8c\x4b\x9c\x36\x84\x35\x65\x28\x4b\x53\xee\xe2\x19\x26\x28\x50\x31\x63\x11\x98\xa9\x4c\x75\x8b\x8d\x64\x5a\xfb\x11\xa2\x17\x1f\x19\x05\x08\x3c\x3d\x84\x63\x9a\x90\x82\xb8\x99\x9b\xcd\xd5\xe7\x02\x7e\xfa\xe1\x07\x3b\x9e\x8c\xfb\x52\x4a\xc8\xa4\x84\x23\x08\xc3\xf0\x47\x77\x8c\x84\x32\x51\x37\x7f\x31\x51\x87\x24\xee\xa5\x92\xc5\x6e\x26\xe5\x5e\x73\x3c\x0c\x43\xf7\x0b\xcf\x60\x97\x06\x9d\xda\xa9\x4e\xe4\x6e\x54\xed\xef\x1f\xfc\x87\x86\xee\xc1\x27\x37\xa6\x37\xfc\xba\x0f\xf5\x60\x03\xd4\xdf\xd8\x8c\xdd\x06\x2b\x1c\x59\xae\x21\x01\x37\x62\xe4\x7a\xf7\xa5\x94\x61\x92\x33\xad\xfb\xe8\x9c\x58\x1a\xe1\x50\xf4\x46\xfd\xd8\x83\x0d\x2d\xee\x67\x1b\x70\x1f\xd7\x66\x2a\xc5\x1c\xb9\x13\xff\x52\xca\xdd\x30\xa4\xba\xd5\xd8\xd5\xa1\xde\xdd\x5b\x34\xb4\x55\x60\x19\x3f\x9d\x7e\xe5\xe0\xff\xfc\xe2\xdd\x4f\x6f\x5f\x1d\x9f\xfc\xf1\x76\xef\xb0\xd5\xa0\xf3\x40\xef\xfa\x46\x42\x0f\xf8\xbf\x37\x00\xff\x45\xb6\x98\x2d\xe8\xc3\x23\x70\xde\x2c\xe3\xf0\xa5\x94\x9f\xc2\x30\xbc\x6e\x4e\x33\x51\x8f\x88\x98\x68\x4c\xe9\x4a\xf9\xef\x4c\xe9\x29\xcb\x49\xa7\x1e\x86\xb9\x12\x2b\x25\xb6\xe2\x78\x36\x10\x76\x2a\x8a\x4e\x9c\x9d\xcc\x3a\xd6\x8e\xfa\xdb\x11\x08\x9e\x77\xee\xeb\xcd\x61\xfd\x44\x7d\x93\xd5\xad\x4d\x97\x96\xc7\x21\xae\xa1\x1c\x26\xee\x15\xcf\x73\x3a\xd1\x3c\x53\x42\xe5\x3e\x12\x4f\x56\x54\xf4\x31\xb5\x76\xf6\xb6\x54\x48\x04\xf5\x84\xfa\x87\x79\xb5\xa0\x4a\x42\x56\xa5\x03\xce\xb2\x91\x98\x67\xab\xc8\xeb\xb6\xdf\x59\xea\x0f\xe7\x84\x07\x2c\x33\xe8\xb8\xc0\xb6\x9d\x4f\xc6\x4f\x22\xd1\x94\x8a\x76\x0a\xd7\x45\x61\xe3\xcd\x28\xc8\xa4\x0c\x63\xa6\x2c\xba\x8f\xe3\x3a\xfc\x2b\x0a\x9c\x3e\xae\xf9\x70\x8d\x91\x15\x1e\x05\xf6\xac\x0d\x87\x48\xfc\xf6\xee\x8f\x37\x91\x38\x3a\x3a\x3a\x72\xd6\xa2\xbf\xbb\x46\xd6\xf1\x8b\xa4\xa0\x03\x57\x6e\x5d\x9f\x52\xe9\xa6\x3e\x2a\x9c\x54\x39\x53\x91\x58\xbe\x84\x4e\xa7\xd8\x15\xcd\x11\x60\x11\x63\x9a\x76\xe5\x73\xd4\x54\x5f\x11\x89\x5e\x8d\xcb\x2c\xe0\x8b\xff\x12\xe4\x8b\xa6\x45\x9c\x17\xf9\xbe\x09\xc2\x36\x98\x0f\xdb\x50\x25\x63\x53\xfc\x76\x7d\x56\xc6\x73\x6c\x12\xb7\x0d\xee\x63\x54\x5a\x8a\x2e\x66\x9a\x05\x41\xc6\x95\x36\xe7\xd6\x42\x47\xf0\xf4\xc7\xc1\x59\xf2\x43\x7b\xf2\x60\xa1\x12\xd0\xd2\xb5\x1d\x1c\x05\x16\x75\x14\x1c\x42\x14\xac\x8a\x9b\x45\x60\xa1\x83\x12\x05\xa3\x4e\x80\x85\xf1\x86\x15\x4e\x48\xb5\xbf\xff\x2c\x71\x10\xec\xef\xd8\x1b\x49\x90\xd6\x0f\xec\x41\x7c\x95\x35\x6d\xc5\xa2\xf5\x9d\x1d\xb9\x86\x2b\xcc\xf3\x7f\x5d\x0a\x79\x25\x6c\xdc\x4e\x99\xa6\x95\x45\xa5\x8d\x2c\xc0\x85\xc7\xa2\x73\x47\x8e\x28\x07\x1e\x77\xc9\xd3\x9b\x86\x5c\x2a\x26\xc0\x9c\x43\x23\x71\x61\x43\xa7\xf5\xe8\x54\xe6\xa9\x73\x67\x6f\x26\xbb\xa8\x69\x22\x01\x9a\x95\x47\x13\x08\x91\xb0\x62\xe6\x3e\x87\x5d\x8a\xff\x56\x95\xa5\xce\xba\x5d\x3c\x9d\xbd\x3f\xdb\x3b\xdc\xc6\x4f\x8b\xe2\x16\x5c\x65\xf5\x71\x32\x9e\x86\x07\x4f\x0f\x74\x14\x34\x56\x0f\x16\x9e\x0f\x5c\x78\x3c\x6c\x8b\x35\x36\x0e\x04\xac\xea\xde\x56\xb6\x7d\x89\x4c\xd7\x76\x7d\xab\x3e\x7a\x62\xfd\x07\x4f\xf4\xa5\x36\xb6\xff\x1c\x40\x29\x1a\xc6\xf3\xa5\x87\x10\xdb\x4b\x99\x52\x6c\xf1\x56\x4b\xc0\x0d\x16\xc3\xf1\x6b\x9f\xc7\xeb\xdf\xd3\x58\xfd\x00\xde\xca\xe7\x38\x1b\x3f\xbd\x33\x0a\x59\xb1\xb5\xb7\x26\xaa\x4c\xce\x1f\xc6\xf2\xb4\x5e\x78\x20\xd1\x5b\x38\xd5\xa2\xd2\x86\x99\x6a\xad\x63\x1f\x5f\x4c\xac\xfa\xca\x96\x2d\x82\x42\xc8\x74\xf9\xd9\xdb\xfb\x52\xb1\x79\x92\x96\xe2\x62\xb5\x86\x3d\x6b\x63\x3a\x79\x68\x20\x2f\xd2\xc9\x3a\x20\x9b\x56\x76\x0b\xf6\x06\x14\x09\x2b\x75\x95\x33\x83\x1a\xd0\x2d\x7c\x89\xb5\xec\x6d\x0f\x85\x85\x9c\x59\xfe\x6e\xbf\xde\x29\x65\x86\xc5\x4c\xb7\x4b\xc9\xd5\x9e\x6c\x1e\xfc\x5d\xef\xca\x15\xd7\x5a\x85\xb6\x70\x3e\x21\x3c\xbf\xc4\x7a\x8b\x05\xf8\x4a\x5f\x1a\xf9\x10\x52\x1f\x40\xa4\xfd\xe2\x98\x81\xcc\x3b\x64\xeb\xc6\xb0\x21\x07\xe9\xae\x2f\x01\xa6\xb5\x4c\x78\x73\x8f\x2c\x46\x73\x85\x28\xc0\xa6\xe0\xca\xd8\xa0\xcb\x5f\xf2\xdc\xe0\x56\x75\xff\xde\x95\x9c\x7f\x01\x65\x87\x8f\xba\xb6\xaa\x79\x55\x40\xa1\xbd\x39\xd8\xdc\x70\xd5\x3c\x45\x85\x29\xb8\xfc\x5e\xa1\xe4\xc2\x27\xa0\x6d\x53\xc9\xf0\xa3\x39\xef\x7d\xc2\xd4\x67\x54\x7c\x5f\x0c\x57\x3b\x7c\x10\xd5\x7d\x8f\x2d\xd6\xc2\x9c\x6b\x83\xe9\xfc\x35\x06\x5b\xf9\x56\x46\x76\xfb\x76\xc5\xb6\xd4\x75\xbb\xb8\x5e\x65\xfa\xc7\x63\xee\xd6\x56\x5d\x1d\xa1\xe5\x10\x69\x6f\x57\x47\x76\x07\x84\x56\x53\xb6\xd6\x94\x92\x0b\x43\xec\x63\x24\x70\x73\xa3\xed\xf5\x3d\xb5\x0f\x77\xf6\xc1\x4d\x37\x6d\xdb\xf7\x8d\x32\x34\xc9\xd4\xea\x36\x7f\x6b\xc9\xae\xfa\xad\xde\x23\x5a\xe5\x33\x95\xe6\xa8\xed\xd1\x94\x2b\xec\x6e\xb0\xaf\xb9\xd5\x3c\xf8\x86\xac\x07\x86\x2a\x9a\x9b\x11\x09\x72\xdb\x0c\xa0\x48\x09\xa9\x75\xd2\x1a\x80\x0b\x2f\x65\x7d\x11\x78\x56\x24\x33\xb7\xc4\x97\x0d\x99\xe8\x81\xd2\xa4\x61\xbc\x7e\xb2\xdc\x46\xcf\x1e\xed\xb8\x54\xe8\x91\xcf\xd5\x14\x05\x64\x5c\xd8\xf5\xff\xdc\x0c\x77\xb9\xb5\x3f\x4c\x9a\xc5\xba\x47\x93\xce\x98\xe2\x68\x6a\xb2\xe2\x15\xab\x75\xcf\xda\x09\x13\x10\xbb\xed\x2f\x4c\xa1\x2a\x37\x65\xe5\x7d\x70\xe1\xf2\xa7\x11\x3e\x80\xb7\xe6\x55\x7c\xbb\xc2\x36\x57\x19\x14\x9a\x4a\x09\x3d\x88\xd6\x79\x23\x6d\x9f\x78\x58\x6d\xbd\xc5\x3a\x74\x67\x83\x3d\xc2\xde\x92\x54\xee\xf7\x96\x28\x0c\x27\xc5\xdc\x3e\xbc\x7d\xf5\x73\xa5\xa9\x7a\x5f\x62\xe8\xd7\x8d\xb7\x02\xb2\x05\x77\x77\xc6\xbe\x79\xd1\xe8\xbe\xe7\x94\xaa\xd3\xfc\x01\x87\x1b\x57\x8d\xfd\xaf\x0b\xbd\xd3\x92\xf1\x44\xb1\x19\x2a\x7d\x9b\x05\xe7\xc6\x18\x50\x4b\x61\xb4\xd9\xa7\xc3\xde\x63\xa5\x4f\xd5\x32\xb8\xbb\x48\x1e\xbe\xaf\xbb\xd1\x4b\x43\xa3\xf4\x57\x33\x3d\xb7\x01\x03\xe3\x46\xb2\x1c\x1a\xe5\x9b\xfd\x78\x1d\x89\x76\x6d\xb7\xae\xff\xdd\xa1\x7f\xd7\x3b\xff\x0b\x00\x00\xff\xff\x03\xaf\xfd\x1d\xe5\x7f\x00\x00")

func graphstoreApiV1betaGraphstoreSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_graphstoreApiV1betaGraphstoreSwaggerJson,
		"graphstore/api/v1beta/graphstore.swagger.json",
	)
}

func graphstoreApiV1betaGraphstoreSwaggerJson() (*asset, error) {
	bytes, err := graphstoreApiV1betaGraphstoreSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "graphstore/api/v1beta/graphstore.swagger.json", size: 32741, mode: os.FileMode(420), modTime: time.Unix(1607497981, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaDepsDepsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\x82\x40\x10\x86\xef\x3c\xc5\x64\xdb\xa3\x91\xd6\xde\xbc\xf5\xd0\xa7\x68\x1a\xb3\xc2\x80\x63\x60\x67\x33\x3b\xd8\x10\xc3\xbb\x37\x8b\x44\x57\x23\xd1\xa4\x17\x20\x33\xdf\xff\xcf\xfe\x30\x1c\x33\x00\x13\x7e\x6d\x5d\xa3\x98\x35\x98\xd5\xf2\xcd\x2c\x62\x8d\x5c\xc5\x66\x0d\xb1\x0f\x60\x94\xb4\xc1\xd8\x2f\xd1\x87\xa2\xe1\xae\xdc\x58\x4f\xf9\xe1\xdd\x36\x7e\x67\xf3\x58\x1d\x2f\x4b\x2f\xac\x3c\x3a\x00\x98\x03\x4a\x20\x76\x51\x37\x3d\x82\x63\x85\x80\x6a\x32\x80\x61\x9c\x53\xb0\x0b\x5d\x8b\xc1\xac\xe1\xfb\xa4\xb2\xde\x37\x54\x58\x25\x76\xf9\x3e\xb0\x8b\xec\xcf\xc8\x7a\xe1\xb2\x2b\x9e\x64\xad\xee\x22\x78\x3c\x8d\x29\xb1\x22\x47\x91\x0b\x97\x54\xe3\x61\xb7\x5d\xf5\xe9\xfa\x73\x31\x86\xed\xfd\x98\x95\xb7\x7b\x2c\x74\x0a\x73\xc2\x3d\x8a\x12\x86\x84\x9e\xf8\x4d\x27\xcd\x55\x35\xf1\x09\x2a\xe4\x6a\x73\x6e\x0d\x8b\x8b\xf6\x60\x9b\x0e\x1f\x08\x17\x69\xaf\x62\x69\xad\xc6\xee\xb6\x57\x4c\x4c\xb3\xf4\x3e\x8d\x30\xd2\x39\xa5\x16\xbf\x44\x58\xfe\x13\x11\x6f\x0c\x9e\xce\x57\x70\x39\x1b\x8f\x9c\x62\x5c\xbb\x99\x7c\xe4\xf4\x63\x75\xdf\xb5\xc5\x10\x6c\xfd\xe8\xbd\xdd\x95\x96\xa8\x96\x9a\x30\x27\xb5\x22\xb6\xbf\x3e\x11\x29\xb6\xb7\x3c\x80\x79\x15\xac\xa2\xe2\x25\x4f\x76\x2b\x4f\x57\x2a\xe1\x87\xb9\xef\x14\xff\x83\x6c\xc8\xfe\x02\x00\x00\xff\xff\xa6\xcd\x5e\xf0\x87\x03\x00\x00")

func v1alphaDepsDepsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaDepsDepsSwaggerJson,
		"v1alpha/deps/deps.swagger.json",
	)
}

func v1alphaDepsDepsSwaggerJson() (*asset, error) {
	bytes, err := v1alphaDepsDepsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/deps/deps.swagger.json", size: 903, mode: os.FileMode(420), modTime: time.Unix(1607497980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaExtractorExtractorSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x08\xb6\xc7\x22\x4e\xd3\x5b\x6e\x41\x9a\x02\x3d\x04\x08\x0a\xf4\xb4\x08\x82\x09\x39\x92\x19\x48\x24\x33\x1c\x66\xe3\x5d\xf8\xdf\x17\x64\x64\x5b\x52\x2c\x47\xb6\xb3\xf1\x2e\xb0\x3e\xc9\x16\xe7\x71\xde\xe3\x9b\x19\xfa\xeb\x44\x08\x19\x3e\x43\x59\x22\xc9\x73\x21\xcf\x4e\x4e\xe5\x1f\xe9\x37\x63\x0b\x27\xcf\x45\x7a\x2f\x84\x64\xc3\x15\xa6\xf7\x1a\x7d\x50\x95\x8b\xfa\x0e\xbc\x99\x3e\xfd\x09\x95\x9f\xc1\x14\x9f\x99\x40\xb1\xa3\xf5\xd3\x89\x27\xc7\x2e\x63\x09\x21\x9f\x90\x82\x71\x36\x21\x34\x8f\xc2\x3a\x16\x01\x59\x4e\x84\x58\xe4\x1d\x95\xb3\x21\xd6\x18\xe4\xb9\xf8\xf4\x12\x05\xde\x57\x46\x01\x1b\x67\xa7\x0f\xc1\xd9\xb4\xf6\x36\xaf\xf5\xe4\x74\x54\x23\xd7\x02\xcf\xc2\x9a\xca\x2a\x69\x8d\x1e\xad\x46\xab\x0c\x86\x65\xde\xab\x65\x29\xce\x85\xf6\x77\x21\xa4\xf3\x48\x79\x87\x7f\x75\x62\xf2\xf7\x12\x60\x7e\xb5\x64\x7d\xd7\x3c\x35\xbc\x73\x14\x61\xf0\xce\x06\x0c\x1d\x30\x21\xe4\xd9\xe9\x69\xef\x27\x91\x04\x0e\x8a\x8c\xe7\x46\xad\x0b\x11\xa2\x52\x18\x42\x11\x2b\xb1\x44\x3a\x69\xc1\xe7\xa0\xa0\x66\x58\xc3\x2b\x30\x21\xe4\xef\x84\x45\xc2\xf9\x6d\xaa\xb1\x30\xd6\x24\xdc\xb0\x3e\xa5\x26\xdd\xff\x1a\x60\xd9\x09\x5f\xb4\xbe\x2d\xda\x3b\x4a\x8d\x05\xc4\x8a\xdf\xce\xde\x8a\x68\xf1\xd9\xa3\x62\xd4\x02\x89\x1c\xad\x48\x1c\xca\x81\xa2\x65\x53\xe3\x55\x02\xdd\x92\xf7\x64\x03\x03\xe9\x81\xa0\x46\x46\x5a\x1b\xe8\xe5\xd3\xa3\x63\xa1\xce\xae\xbf\x77\x7a\xde\xcf\xd7\xd8\xa1\x37\x84\x8f\xd1\x10\x26\x8f\x30\x45\x7c\xf7\xb3\x7a\x8c\x18\x78\x0c\xe5\xdb\x16\x65\x86\xb2\x4f\x76\x93\x81\xd7\xb0\xb7\x93\x36\x5c\xa3\xde\x40\xf5\xd4\xc0\x6a\x76\x70\xed\x5c\x67\x94\x9f\xa4\x72\x72\xb2\xbf\xea\xa6\xf9\xfc\xc8\x75\xd3\x9c\xd4\x51\xaa\x66\x35\xdc\x5a\x99\xad\x47\x51\x1a\xa6\x6b\xb4\x76\xfd\xf0\xdc\x67\x01\xdd\xfd\x03\xb6\xa6\x49\x9a\x7b\x1e\x89\x4d\xaf\x24\xa4\xa3\x12\xac\xf9\x02\x8d\x81\x3a\xc5\xb2\xc4\x0a\x4c\xc6\x96\x72\xe3\xc1\xd6\x4e\xc7\x3c\xe0\x77\x8e\x6c\xc6\xf9\xa5\xb3\x81\x09\x8c\xed\x9b\x7b\x14\x48\x50\xce\xbf\xae\xf2\x65\x24\x10\x41\xd7\x2c\xd2\x30\xd6\xfd\xf5\x5b\xf6\x1a\xf2\x73\xe3\xd3\x71\xf9\x6e\xec\x87\xdd\x23\xbc\x06\x0b\x25\xd6\x68\xf9\x1f\xd3\x91\x73\xe7\x03\xad\xc0\x96\x11\xca\xbd\x8e\x24\xcc\x03\x63\xbd\x57\xa4\x8b\xa4\xf0\x7f\xaa\xf6\x09\x3e\xba\x07\xf7\x09\x6d\x8f\xb1\xc3\xfd\xb7\xb9\x13\xf5\xca\xfc\x03\x5c\x39\x74\x67\x38\xc0\x90\x01\x53\xf3\x4f\xbd\x6e\x0f\x95\x0b\x53\xe1\xa5\xb3\x8c\x96\x07\x55\xee\x25\x92\xdf\x81\xd6\x59\x43\xa8\x6e\x36\xa7\xb5\x35\x83\x21\x7d\xe3\x0e\xfe\x1e\x29\x6f\x33\x9a\x0f\xd0\xb7\xee\xb4\x8e\x0f\xf2\x62\xaf\x5f\x6d\x56\x6e\xbb\x04\x9d\xe9\x7a\x2c\x7f\x75\xff\xe2\xed\x2d\xd9\x28\x23\x8d\x92\xe3\x3d\xfc\xc0\x6a\x86\xfa\xe6\xd8\xcc\xf2\xdf\xf8\xfb\x58\x5c\xd8\x83\x2e\x28\x69\xfd\xdd\x2e\x85\xd7\x6e\xef\x50\xc5\xb7\x1a\x62\x47\x84\xc2\x51\x0d\x9c\xaf\x99\x73\xc6\xb7\xaa\xb9\x73\x21\x3e\x80\x22\xf6\x00\x46\xf3\x53\x4e\x0f\xd2\x33\x96\xb1\x44\x1a\xe2\x67\x2c\xff\x75\x36\x30\x4e\x31\x84\x3d\x2f\x10\x1a\x19\x4c\xf5\xdd\x7a\x50\xdb\x52\x63\x9c\x98\x2e\xd1\x93\xc5\xe4\x5b\x00\x00\x00\xff\xff\xcc\xa3\x5c\xbf\xab\x12\x00\x00")

func v1alphaExtractorExtractorSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaExtractorExtractorSwaggerJson,
		"v1alpha/extractor/extractor.swagger.json",
	)
}

func v1alphaExtractorExtractorSwaggerJson() (*asset, error) {
	bytes, err := v1alphaExtractorExtractorSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/extractor/extractor.swagger.json", size: 4779, mode: os.FileMode(420), modTime: time.Unix(1607497980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaSchemaSchemaSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\xfa\x30\x0c\xc6\xef\x7d\x0a\x2b\xff\xff\x11\xd1\x8d\xdd\xb8\xed\xb0\xa7\x98\x26\x14\x5a\xb7\x18\xb5\x49\x64\xbb\x4c\x15\xea\xbb\x4f\x29\x1d\x04\x44\x05\xd2\x4e\xa9\xec\xdf\xf7\x39\x5f\xeb\x1e\x33\x00\x23\xdf\xb6\xae\x91\xcd\x1a\xcc\x6a\xf9\x62\x16\xb1\x46\xae\xf2\x66\x0d\xb1\x0f\x60\x94\xb4\xc1\xd8\x2f\x31\x48\xd1\xf8\xae\xdc\xd8\x40\xf9\xe1\xd5\x36\x61\x67\x73\x29\x76\xd8\xfe\x1e\xcb\xc0\x5e\xfd\xe8\x02\x60\x0e\xc8\x42\xde\x45\xed\xf4\x08\xce\x2b\x08\xaa\xc9\x00\x86\x71\x56\xe1\x9d\x74\x2d\x8a\x59\xc3\xe7\x49\x65\x43\x68\xa8\xb0\x4a\xde\xe5\x7b\xf1\x2e\xb2\x5f\x23\x1b\xd8\x97\x5d\xf1\x24\x6b\x75\x17\xc1\xe3\x69\x4c\x89\x15\x39\x8a\x9c\x5c\x92\x8d\x97\xdd\x76\xd5\xbb\xeb\xcf\xc5\x18\xb8\x0f\x63\x5e\xbf\xdd\x63\xa1\x53\x98\x13\x1e\x90\x95\x50\x12\x7a\xe2\x37\x1d\x37\x57\xd5\xc4\x47\x94\xc9\xd5\xe6\xdc\x1a\x16\x17\xed\xc1\x36\x1d\x3e\x10\x2e\xd2\x5e\xe5\xb9\xb5\x1a\xbb\xdb\x5e\x31\x31\xcd\xd2\x73\x1a\x61\xb8\x73\x4a\x2d\x7e\x30\x7b\xfe\x4b\x44\xbc\x31\x78\x3a\x5f\xe1\xcb\xd9\x78\xe4\x14\xe3\xea\xcd\xe4\x23\xa7\x6f\xab\xfb\xae\x2d\x8a\xd8\xfa\xd1\x7b\xbb\x2b\x2d\x51\x2d\x35\x32\x27\xb5\xcc\xb6\xbf\xbe\x11\x29\xb6\xb7\x3c\x80\xf9\xcf\x58\x45\xc5\xbf\x3c\xd9\xad\x3c\x5d\xa9\x84\x1f\xe6\xbe\x53\xfc\x0f\xb2\x21\xfb\x09\x00\x00\xff\xff\x9b\xfc\xdd\x16\x8b\x03\x00\x00")

func v1alphaSchemaSchemaSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaSchemaSchemaSwaggerJson,
		"v1alpha/schema/schema.swagger.json",
	)
}

func v1alphaSchemaSchemaSwaggerJson() (*asset, error) {
	bytes, err := v1alphaSchemaSchemaSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/schema/schema.swagger.json", size: 907, mode: os.FileMode(420), modTime: time.Unix(1607497980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaStoreStoreSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x08\xfa\xbe\x63\xd0\xac\xe9\x2d\xb7\x02\xed\x86\x0d\xc3\x56\x74\x03\x76\x18\x8a\x42\xb1\x68\x47\x9d\x2d\x09\x14\x95\x21\x28\xfc\xdf\x07\xc9\x89\xab\xa6\x76\xe3\x20\xc9\x25\x09\xc4\xf7\x1e\xf9\x44\x8a\x79\xce\x18\xe3\xee\xaf\x28\x4b\x40\x3e\x67\x7c\x76\xf1\x81\x4f\xc2\x99\xd2\x85\xe1\x73\x16\xe2\x8c\x71\x52\x54\x41\x88\x4b\xb0\x2e\xaf\x8c\x97\x8f\xc2\xaa\xe9\xea\x52\x54\x76\x29\xa6\x8e\x0c\x42\xfb\x79\x61\xd1\x90\x89\x1a\x8c\xf1\x15\xa0\x53\x46\x07\xe6\xe6\x27\xd3\x86\x98\x03\xe2\x19\x63\x4d\xcc\x94\x1b\xed\x7c\x0d\x8e\xcf\xd9\xef\x96\x25\xac\xad\x54\x2e\x48\x19\x3d\x7d\x72\x46\x07\xec\x43\xc4\x5a\x34\xd2\xe7\x23\xb1\x82\x96\x01\xf8\xdc\xa6\x91\x50\x28\xad\x02\xce\xbd\xf8\x8a\xc5\x2e\x7c\x71\xad\xd7\xdd\x61\xb0\xbb\xb6\xd1\xad\x59\x3c\x41\x4e\x1b\x33\x2d\xdc\x02\x92\x02\x97\xa0\x37\xf8\x47\x8f\xd5\xab\xd3\x44\xc7\x11\x2a\x5d\xf2\x2e\xd4\x4c\x5e\xb8\x2b\x51\x79\xd8\x43\x9c\xa4\xb1\xc2\x60\x2d\x28\x44\x17\x6b\x82\x44\x34\x4b\xbf\x37\x29\x38\x7a\x4d\xaa\x86\x5b\x44\x83\xc7\x58\x84\x1d\x81\xd1\xfe\x72\x23\x07\xed\x29\x4d\x10\x06\x6f\xc0\x9f\xd2\x74\x35\xeb\x57\xad\xc1\x39\x51\xee\xbb\xb7\x5e\xaa\x04\x12\xaa\x72\x43\x54\x81\x28\xd6\xaf\x2b\x52\x04\xf5\x2e\x9e\x31\xfe\x3f\x42\x11\x18\xff\x4d\x93\xd9\x9a\xa6\x23\x95\xe0\x9b\x3d\x7d\x8a\x8f\xe7\x06\x2a\x20\xb8\x07\x67\x8d\x76\xf0\x4e\xbb\xde\x52\x3f\x2a\x2d\x47\x10\xf7\xf6\xd9\x0a\x85\x67\xbb\x9b\x58\xe9\x27\x14\x76\xf9\x99\xa0\xbe\x13\x0a\x0f\xbe\xa2\x8e\x7d\x8c\xc9\x72\x2b\xf2\xb3\x25\x1e\x3c\x43\x7f\x2e\x4f\xf2\x62\x53\xc5\xd9\xc9\x15\xaf\x4e\xad\x08\x3a\x37\x32\x30\x77\x74\xc7\x34\xfb\x76\xcb\xed\x55\xee\x1a\x72\x23\x48\x9c\x6f\x19\x0e\x94\xd4\x33\x49\x3b\xb9\x38\x68\x5f\x77\x7f\x3a\xf1\xe4\xfe\xfa\x57\x52\x0a\xff\xf2\xe3\xfb\xb7\x6d\xfa\x87\x8e\x26\xa1\x10\xbe\x8a\xf5\x05\xfc\x3b\xc5\xc4\xc7\x70\xcc\x7e\x96\x6f\xb7\xe1\x98\xbe\xf4\xf7\x43\xf7\x2c\xed\x03\xd5\x86\x1b\xf0\x55\x39\x3a\xc5\xaa\xea\x5b\x3d\x67\x5a\x55\x07\xaf\xa9\x3b\x3f\xc6\x62\xb6\x65\x37\x59\x93\xfd\x0b\x00\x00\xff\xff\x74\x37\xef\xc2\x8b\x09\x00\x00")

func v1alphaStoreStoreSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaStoreStoreSwaggerJson,
		"v1alpha/store/store.swagger.json",
	)
}

func v1alphaStoreStoreSwaggerJson() (*asset, error) {
	bytes, err := v1alphaStoreStoreSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/store/store.swagger.json", size: 2443, mode: os.FileMode(420), modTime: time.Unix(1607497980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaTrackerTrackerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xa3\x36\x14\x7e\xcf\xaf\xb0\x68\x1f\x57\x9b\xe9\xf4\x6d\xde\x56\xdd\xae\x54\xa9\xab\x4a\x9d\xf6\xa9\x1a\x8d\x1c\x73\x42\xbc\x0b\xb6\xc7\x97\x69\xd3\x55\xfe\x7b\x85\x31\x03\x86\x40\x02\x26\x37\x15\xa4\xd1\x24\x31\x3e\x9c\xeb\x77\x3e\xdb\x7c\x5b\x20\x14\xa9\xbf\x71\x92\x80\x8c\x1e\x50\x74\xff\xfe\x2e\x7a\x97\xff\x46\xd9\x9a\x47\x0f\x28\x1f\x47\x28\xd2\x54\xa7\x90\x8f\xc7\x20\x14\x49\xb9\x89\x9f\xb1\xa0\xcb\xd7\x1f\x70\x2a\x36\x78\xa9\x25\x26\x5f\x41\x96\xff\xdf\x0b\xc9\x35\xb7\x72\x10\x8a\x5e\x41\x2a\xca\x59\x3e\xdb\x7d\x44\x8c\x6b\xa4\x40\x47\x0b\x84\x76\xf6\x69\x84\x33\x65\x32\x50\xd1\x03\xfa\xab\x98\x85\x85\x48\x29\xc1\x9a\x72\xb6\xfc\xa2\x38\xcb\xef\x7d\xb2\xf7\x0a\xc9\x63\x43\x8e\xbc\x17\xeb\x8d\xaa\xcc\x78\x53\x38\x91\x58\x6c\x96\xdf\x52\xcc\x12\x83\x13\xd8\x2d\x63\x10\xc0\x62\x60\x84\x42\x75\x3f\x42\x51\x02\xba\xf6\x15\xa1\x88\x0b\x90\xf6\x49\xbf\xc4\xb9\x45\x1f\xcb\x79\xdb\x47\x90\xaf\x94\xc0\xf3\xaf\x54\xe9\x8f\x75\x69\xef\xaa\xc9\x12\x94\xe0\x4c\x79\x8f\xb0\x03\xf7\x77\x77\x8d\x9f\x50\xee\x6b\x45\x24\x15\xda\x39\xef\x03\x52\x86\x10\x50\x6a\x6d\x52\x54\x4a\x7a\x5f\x13\x6f\x27\x29\xb2\x81\x0c\xb7\x84\x21\x14\x7d\x2f\x61\x9d\xcb\xf9\x6e\x19\xc3\x9a\x32\x9a\xcb\x55\x65\xc8\x9a\x5a\xff\xee\xe4\x47\x9e\x94\x5d\xed\xdb\xae\xfe\xe0\x28\x86\x35\x36\xa9\x3e\x6c\x04\x43\x86\xc1\x3f\x02\x88\x86\x18\x81\x94\x5c\xbe\xd9\x12\x6a\x8a\x34\x4c\xd3\x0c\x7e\xce\x85\xf6\xe8\xbd\xd8\x63\x41\x24\xb0\xc4\x19\x68\x90\x55\x5a\x15\x57\xc3\x1c\x86\x33\x5b\x07\x65\xe6\x34\x75\xa6\xd6\xca\x3c\xed\x9a\x23\x12\x5e\x0c\x95\x90\x67\x8d\x96\x06\x1a\xa3\x7a\x2b\xac\x5c\xa5\x25\x65\x49\xd4\xe5\xe7\x0e\x6d\xb8\x4c\x30\xa3\xff\xda\xbc\xdc\xaf\xd1\x8b\x01\xb9\xed\x51\x69\x8d\x53\x35\xad\x4e\x19\x8f\x4d\xda\xe1\x9f\xf3\x6b\x63\xff\x9f\x43\x97\xb7\xcf\x4f\xb5\xec\xd2\x38\x69\xe6\x55\x1b\x39\x2a\x31\x4f\x8b\xba\x30\x67\xde\x11\xe0\xa5\x27\x84\x2e\x7d\x83\xc0\xa5\x67\xd8\x2a\xaf\x19\xb6\x66\xd8\xba\x32\xd8\x2a\x3c\x3b\x08\xa2\x3e\xdb\x29\x75\x78\xba\x1d\x50\x2a\x74\x9f\x01\xc9\x5d\x1d\x09\x2e\x3a\xc1\x28\x24\xc1\x29\xd3\x90\x2f\x68\x1a\xc3\x6b\x2e\x33\xac\xdd\x0d\x3f\xde\x0f\x2d\x46\xc2\x0d\xd3\x57\xa1\xec\xd1\xd5\xea\x15\xd0\xd0\x4a\x5d\x66\x98\xe1\xc4\xea\x1f\x50\xb1\x9f\x9d\x90\xdb\x29\xdc\x42\xe1\xb9\x72\xdd\xd5\x51\x0d\x46\xa6\xd7\xd2\x25\x73\x5f\x5c\x89\x2a\x5f\x29\x8b\xaf\xab\x61\x87\x41\x80\xe2\x46\x12\x08\x43\x80\x47\x2b\xe3\x86\xd6\x13\x4e\xe1\x19\x01\xdc\x35\x6a\x31\x71\xfe\xda\x9b\x97\x13\x87\xb4\xb9\xbe\xe5\xc4\x38\x74\x52\x0e\x51\x06\xc0\x52\x51\xd3\xb7\xb9\x94\x28\x74\x9f\xe1\xc8\x5d\xf3\x52\xe2\x12\x4b\x09\xaf\x80\x86\x56\x6a\x91\xcd\xf5\x7a\x15\x5c\x0d\x29\xd8\x3f\xec\xfc\x9b\xa8\x58\xab\xea\x5c\xac\xee\xea\x28\x80\x15\x8f\x5b\x49\x5e\xe4\xff\xbe\x91\xfe\x4d\xc8\x91\x71\x2a\x51\xf5\xc5\x80\xd2\xc7\xd8\x3b\x4d\x85\xbc\x9d\x79\xd6\x54\xaa\x4e\x28\x63\x10\xaa\xda\x62\x2b\x96\xa2\x19\x30\xfd\x89\xa6\x1e\x0b\x2f\x2b\x9e\xaf\xbe\x00\xa9\x90\x24\x12\x32\x2f\x23\x4d\x1b\x75\x51\x71\xb5\x46\xb5\x74\xf5\xf0\x7a\x6c\xd5\x56\x69\xc8\x46\xcd\xb4\x1e\xf9\x53\xa6\x63\x26\x7b\x74\x6e\xc4\x7c\x47\xbd\x46\xcc\xac\x4e\xac\x07\x4f\xed\x38\x47\xf6\xe6\x63\x29\xb1\x9f\xe2\x11\xd5\x90\x35\xef\xef\xcc\x5f\x87\xad\x7e\xaa\xec\x07\xf5\xba\x6a\xae\xf4\x8e\x33\x69\x2f\xaa\xdb\x63\xfd\x95\x59\x7f\x60\xdb\x90\x5c\xcc\xef\x7f\x36\xe3\x92\xe2\x15\xa7\xe6\x90\x15\x9e\x67\xab\xde\xb7\xda\x6a\x38\x64\xa1\x07\x81\x01\x26\x42\x43\xc0\xd1\xf6\x11\x1e\x77\x9a\xb7\xaf\xbb\x77\xf7\x76\xaf\x14\x40\xa9\x91\xc5\x1f\x83\xc6\x34\x3d\x59\x2e\xd7\x53\x6a\x7f\x06\xf7\xc5\xe9\x51\x4b\xc0\x59\x70\xb4\x12\x29\xc8\xf3\x69\x3c\xbf\xd1\x5a\x9c\x48\x74\x40\x50\xad\x56\x4a\x63\x6d\x3a\x03\x7b\x7b\x39\x51\xd0\x80\x02\x11\xd5\xa5\x7a\xa5\x6b\x1d\xcf\x84\x33\xa5\x25\xa6\xac\x49\xe9\x8e\xeb\x9b\x84\x8b\x29\xfa\xc7\x31\x2b\xf4\x9d\x47\xaa\xd7\x61\x1d\xa2\x88\x41\x41\x5b\x2e\x16\x83\xf1\x7c\x65\x68\xe3\xef\xf3\x41\x93\x7d\x9c\xd5\x05\x97\xe3\x4e\xe1\x2c\xa3\xf0\xdf\x63\x6b\xe3\x79\xa8\xff\x46\x32\x8c\x21\x35\x50\x9b\x66\x37\xfe\x83\xec\x76\xcb\x92\x8a\xd2\x95\x4b\x93\x39\x87\xc6\xfa\xb2\xf3\xad\xc6\x00\x97\x9e\x91\xe1\xb7\x32\x62\x48\x3b\xec\x7f\x3f\x6a\x02\x07\xe8\x5b\x31\xbf\x79\xa0\x1b\x60\x7b\xfb\x1d\x96\x49\x0d\x77\x4a\x3b\x85\x5d\x0b\x19\x69\xb4\xff\xfa\x49\x80\xcd\xa2\x07\x3f\xc6\xb3\xd7\x62\x07\x74\x7a\x52\x7c\xda\x00\x79\xbd\x7d\x5c\x60\x1a\x9b\xf9\xff\x97\xc0\xb4\x8f\x6c\x4e\x10\x18\x47\x1a\x42\x02\x33\x09\x44\x9e\xd8\x58\x1f\x26\x46\x1b\xed\xc3\x4c\x08\x2a\xb6\xf8\xfe\xc1\x48\x95\x4b\x84\x01\xcc\x61\x48\x45\x1e\x63\x77\x38\xc3\x6c\xbd\x1c\x71\x50\xcf\x66\xac\x3c\xab\xa7\xf0\x62\x9f\xdd\x8f\x80\x25\xd9\x4c\xc0\x2a\x09\x66\x04\x3a\xc9\xf5\x8a\xf3\x14\x30\xeb\xdc\x86\x73\xc3\x7b\x7d\x50\x71\x8b\xdf\x5a\x2c\xbc\xb7\x16\xda\xac\xb9\x57\x7e\x4e\xde\x4e\xf3\x04\xd7\x80\x3e\xb5\xb7\xff\xc6\xe6\x85\x03\x93\x81\x12\x07\x55\x44\x99\x19\xe1\xc8\x27\x5b\xd9\x75\xd8\xb3\x7e\x5e\x1e\xc8\x8b\x2b\xe1\x9c\x97\xd9\xf2\x1f\xa1\xdd\xf5\x30\xd6\xf3\x91\x81\x89\xfa\xa3\x7f\x40\x78\x65\x7d\xa2\x3c\x14\x3c\x99\x13\x7b\x4f\x22\x87\x3b\xd3\x3f\x15\x0f\x39\x3d\xca\x05\x51\x96\x4c\xd6\x7e\xf6\x6a\xbd\xff\x8c\x2d\x40\xed\x8b\x9f\x66\xfe\x74\x93\x3b\xd2\xe1\x5b\x41\x9d\xd0\x19\xbc\x05\x32\x88\xaa\x95\xe7\x12\xe7\x21\xbc\x8b\xfc\x6f\xb7\xf8\x2f\x00\x00\xff\xff\x44\xe9\x49\x8f\xde\x3d\x00\x00")

func v1alphaTrackerTrackerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaTrackerTrackerSwaggerJson,
		"v1alpha/tracker/tracker.swagger.json",
	)
}

func v1alphaTrackerTrackerSwaggerJson() (*asset, error) {
	bytes, err := v1alphaTrackerTrackerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/tracker/tracker.swagger.json", size: 15838, mode: os.FileMode(420), modTime: time.Unix(1607497980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"depscloud/api/v1beta/core.swagger.json":        depscloudApiV1betaCoreSwaggerJson,
	"depscloud/api/v1beta/manifest.swagger.json":    depscloudApiV1betaManifestSwaggerJson,
	"depscloud/api/v1beta/rpc.swagger.json":         depscloudApiV1betaRpcSwaggerJson,
	"graphstore/api/v1beta/graphstore.swagger.json": graphstoreApiV1betaGraphstoreSwaggerJson,
	"v1alpha/deps/deps.swagger.json":                v1alphaDepsDepsSwaggerJson,
	"v1alpha/extractor/extractor.swagger.json":      v1alphaExtractorExtractorSwaggerJson,
	"v1alpha/schema/schema.swagger.json":            v1alphaSchemaSchemaSwaggerJson,
	"v1alpha/store/store.swagger.json":              v1alphaStoreStoreSwaggerJson,
	"v1alpha/tracker/tracker.swagger.json":          v1alphaTrackerTrackerSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"depscloud": &bintree{nil, map[string]*bintree{
		"api": &bintree{nil, map[string]*bintree{
			"v1beta": &bintree{nil, map[string]*bintree{
				"core.swagger.json":     &bintree{depscloudApiV1betaCoreSwaggerJson, map[string]*bintree{}},
				"manifest.swagger.json": &bintree{depscloudApiV1betaManifestSwaggerJson, map[string]*bintree{}},
				"rpc.swagger.json":      &bintree{depscloudApiV1betaRpcSwaggerJson, map[string]*bintree{}},
			}},
		}},
	}},
	"graphstore": &bintree{nil, map[string]*bintree{
		"api": &bintree{nil, map[string]*bintree{
			"v1beta": &bintree{nil, map[string]*bintree{
				"graphstore.swagger.json": &bintree{graphstoreApiV1betaGraphstoreSwaggerJson, map[string]*bintree{}},
			}},
		}},
	}},
	"v1alpha": &bintree{nil, map[string]*bintree{
		"deps": &bintree{nil, map[string]*bintree{
			"deps.swagger.json": &bintree{v1alphaDepsDepsSwaggerJson, map[string]*bintree{}},
		}},
		"extractor": &bintree{nil, map[string]*bintree{
			"extractor.swagger.json": &bintree{v1alphaExtractorExtractorSwaggerJson, map[string]*bintree{}},
		}},
		"schema": &bintree{nil, map[string]*bintree{
			"schema.swagger.json": &bintree{v1alphaSchemaSchemaSwaggerJson, map[string]*bintree{}},
		}},
		"store": &bintree{nil, map[string]*bintree{
			"store.swagger.json": &bintree{v1alphaStoreStoreSwaggerJson, map[string]*bintree{}},
		}},
		"tracker": &bintree{nil, map[string]*bintree{
			"tracker.swagger.json": &bintree{v1alphaTrackerTrackerSwaggerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
