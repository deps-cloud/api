// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package swagger generated by go-bindata.// sources:
// v1alpha/tracker/tracker.swagger.json
// v1alpha/extractor/extractor.swagger.json
// v1alpha/schema/schema.swagger.json
// v1alpha/deps/deps.swagger.json
// v1alpha/store/store.swagger.json
package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _v1alphaTrackerTrackerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x08\xb5\xc7\xc5\x3a\x4d\x6f\xb9\x2d\xba\x2d\x50\xa0\x7b\x69\xd2\x53\x11\x04\x8c\x34\x56\xb8\x95\x48\x86\x1c\xa5\x75\x17\x7e\xf7\x42\x22\x15\x89\x92\x65\xeb\x37\x89\x52\x12\x58\x6c\x6c\x91\xe3\x19\xce\x7c\xdf\xcc\x50\xfc\xb6\x21\x24\xd0\x7f\xd3\x38\x06\x15\x5c\x91\xe0\xf2\xe3\x45\xf0\x21\xff\x8e\xf1\x9d\x08\xae\x48\xfe\x9c\x90\x00\x19\x26\x90\x3f\x7f\xfa\x81\x26\xf2\x81\x6e\x51\xd1\xf0\x2f\x50\xe5\xff\x1f\xa5\x12\x28\x8a\x95\x84\x04\x4f\xa0\x34\x13\xbc\x98\x6f\xfe\x24\x5c\x20\xd1\x80\xc1\x86\x90\x43\x21\x3f\x14\x5c\x67\x29\xe8\xe0\x8a\xfc\x69\x56\x51\x29\x13\x16\x52\x64\x82\x6f\xbf\x6a\xc1\xf3\xb9\xb7\xc5\x5c\xa9\x44\x94\x85\x3d\xe7\x52\x7c\xd0\x95\xe2\xdb\x52\xe1\x58\x51\xf9\xb0\xfd\x96\x50\x1e\x67\x34\x86\xc3\x36\x02\x09\x3c\x02\x1e\x32\xa8\xe6\x13\x12\xc4\x80\xb5\x8f\x84\x04\x42\x82\x2a\x7e\xe9\xd7\x28\xb7\xe8\x73\xb9\x6e\x7f\x0d\xea\x89\x85\x70\xf7\x1b\xd3\xf8\xb9\x2e\xed\x43\xb5\x58\x81\x96\x82\x6b\xe7\x27\x8a\x07\x97\x17\x17\x8d\xaf\x08\x09\x22\xd0\xa1\x62\x12\xed\xe6\x7d\x22\x3a\x0b\x43\xd0\x7a\x97\x25\xa4\x94\xf4\xb1\x26\xbe\x58\xa4\xc3\x07\x48\x69\x4b\x18\x21\xc1\xf7\x0a\x76\xb9\x9c\xef\xb6\x11\xec\x18\x67\xb9\x5c\x5d\xba\xac\xa9\xf5\xef\x56\x7e\xe0\x48\x39\xd4\x3e\x1d\xea\x3f\x1c\x44\xb0\xa3\x59\x82\xe7\x8d\xe0\x24\xe3\xf0\x8f\x84\x10\x21\x22\xa0\x94\x50\xcf\xb6\x4c\x35\x45\x65\x1c\x59\x0a\x3f\xe7\x42\x4f\xe8\xbd\x39\x62\x41\x20\xa9\xa2\x29\x20\xa8\x2a\xac\xcc\x68\x98\xc3\x69\x5a\x44\x7e\x19\x39\x4d\x9d\x59\x61\x65\x1e\x76\xcd\x27\x0a\x1e\x33\xa6\x20\x8f\x1a\x54\x19\x34\x9e\xe2\x5e\x16\x72\x35\x2a\xc6\xe3\xa0\x6b\x9f\x3b\xb4\x11\x2a\xa6\x9c\xfd\x5b\xc4\xe5\x71\x8d\x1e\x33\x50\xfb\x13\x2a\xed\x68\xa2\xe7\xd5\x29\x15\x51\x96\x74\xec\xcf\xcc\xda\x3c\xff\x7d\x5b\xf3\x28\xd2\xb8\xe9\xcb\x36\x5a\x2b\x31\xb7\x9b\xba\x30\x6b\x60\x4f\xc2\xd8\xa2\x90\x22\x11\xf1\x7e\x08\x73\xdc\xd8\x35\x5d\xbc\x51\x3e\xf7\xfc\xe1\xf9\xc3\xf3\xc7\xa2\xda\xf4\xe6\x8f\x06\x66\x67\x66\x8f\x2d\x32\x30\xfa\xcf\x4e\x22\x37\x46\xf2\x2a\xa9\xc4\xe8\xee\x09\xc5\x0e\x4f\x28\x9e\x50\xba\x09\x05\x67\xec\x5e\x70\x85\xbd\x0b\xfa\xca\xa3\x1c\x9e\x28\xde\x11\x51\x2c\xd0\xb9\xe0\xfc\x7d\x0b\xae\xb8\x6b\xf1\xcc\xf1\x3c\x3c\x73\xbc\x23\xe6\x58\xa0\xc4\x58\xaa\x63\xc1\xd5\xf7\x2b\xe8\xbb\x15\x4f\x25\xb3\xe8\xf4\x9e\xa8\xc4\xd8\x32\xa8\x33\xf9\x52\x2c\xa9\x93\xc4\x7a\xc8\xc0\xe8\xee\x29\xc0\x8e\x8e\x00\x97\x9d\xf0\x9f\x12\xde\x8c\x23\xc4\xa0\x9a\xab\x77\x42\xa5\x14\xed\x84\x1f\x2f\x87\x82\x31\x14\x19\xc7\x37\xa1\x6c\x6f\xac\x3a\x00\x1a\x8a\xd4\x6d\x4a\x39\x8d\x87\x25\xf6\x36\x62\xbf\x58\x21\xeb\x01\xae\x51\xd8\x23\xd7\x8e\x0e\x34\x64\x2a\x79\x5b\x79\x69\x5a\xac\x6b\x91\xa9\x10\xa6\x85\xfa\x75\x21\x63\x45\xe7\x65\x56\x61\x1f\xea\x76\x8c\xaa\x53\x5f\xbe\x2a\xf4\x95\xaa\x19\xcb\x30\x82\xb6\x28\x1e\x40\x05\x06\x47\xeb\xac\x53\x8d\xee\x9e\x02\xec\xf0\x75\xea\x6b\xd4\xa9\x0e\x80\x86\x22\xd5\x44\x73\x1d\xaf\x52\xe8\x21\x80\xbd\x29\xd6\xaf\x02\xb1\x85\xaa\x1e\xac\x76\x74\x00\xe0\x5e\x44\xad\x20\x37\xf1\x7f\xec\xc9\xe9\x33\xa5\x91\x7e\x2a\x59\xf5\x31\x03\x8d\x7d\xec\x9d\x07\x21\xcf\x57\x69\x6b\x2a\x55\x17\x5f\x23\x90\xba\x7a\x85\x64\xfa\x9c\x14\x38\xfe\xc2\x12\xa7\xf2\x2d\x11\x2f\xee\xbf\x42\x58\x31\x49\x20\x55\x0e\x23\x64\x0d\x5c\x54\xf5\x51\x03\x2d\x5d\x39\xbc\xee\x5b\xbd\xd7\x08\xe9\xa8\x95\xc5\x8e\xfc\xa1\x92\x31\x8b\x9d\x12\x6a\xc4\x7a\x5b\xee\x8c\x58\x59\x5d\x84\x1e\xbc\xb4\xe3\x7a\xb2\xb3\x9e\x2a\x45\xdd\x10\x0f\x18\x42\xda\x9c\xdf\x19\xbf\x96\x5b\xdd\x50\x39\x4e\xea\x87\xa3\xec\x5c\xdc\xfa\xbe\xcf\x76\x9f\xf8\x7e\x4a\x4c\xe5\xf3\xef\xb2\x71\xce\x7d\xa2\x49\x76\xce\x37\xce\x0e\x55\x39\xec\x7e\x8f\x35\x74\x1d\xb7\xd0\xa1\xb2\x09\x26\x42\x43\x40\x6f\xfb\x42\x11\x75\x9a\x77\x2c\x4b\x77\xe7\x68\x27\xa4\x41\xeb\x91\x20\x8e\x00\x29\x4b\x16\x8b\xc9\x7a\x48\x0d\x88\x44\x43\xdd\x26\x8a\xf5\x6b\xf1\x9b\x85\xfb\x5d\x28\xb8\x46\x45\x19\x6f\xa6\xe1\x7e\x5c\x17\x0a\x39\x07\xe6\xfb\x74\x55\xa7\x36\xd3\xe4\x8c\x57\xdb\xcc\xf1\xc9\x62\x28\xeb\x9e\xda\x83\x26\xf5\xbf\xe8\x16\xbc\x70\xe2\x3a\xb1\x0f\xd7\xad\x13\xb3\xa1\xfb\x30\x84\xde\x8f\x2a\x72\xee\xda\xf9\x04\xdd\x5e\x30\xd7\x5a\x2b\xc6\xa5\xdb\x7e\xd7\x65\xa7\x24\x62\x66\xea\xee\x45\x76\xa0\xec\x6a\x6a\x2f\xfc\x27\x1a\x8f\xb3\x7a\x1f\xd7\xe6\xfb\xd6\xd5\x83\xf7\xef\xf9\xe6\xfb\x9a\x09\x16\xb7\x5f\x51\x2f\x61\xb3\x55\xd8\xe6\x91\x91\x46\xbb\x6f\x97\x27\xd8\x2c\x4f\x24\xa2\xf1\xc5\xa4\x39\x83\x9a\xbf\x46\x5d\xd6\x41\x4e\x82\x1f\xe7\x98\xc6\x71\xea\xff\xc5\x31\xed\x43\xf3\x05\x1c\x63\x2b\x8e\x29\x8e\x99\x25\x3b\x2c\x6c\xac\x4b\x13\xa3\x8d\x76\x69\x66\x0a\x2b\xb6\x8a\xfe\xb3\x9e\x2a\xfb\x84\x01\x25\xe8\x10\x44\xf6\xb1\x7b\x7a\x79\xda\x7a\x25\x7c\x56\xcf\xa6\xaf\x1c\xab\xe7\xd8\xc5\x53\x76\xbb\x47\x8e\x6f\xcc\xee\xf2\x98\x71\x31\xd0\x9c\x3c\xdb\x1c\x0e\x1e\xa7\x2e\x99\x58\x43\xad\xa0\x84\x74\x5f\x2b\x4c\xb1\x37\x17\x94\x77\x6e\x1d\x36\xdf\x0b\x91\x00\xe5\x9d\xc7\x6f\xf6\xf1\x19\xad\x8f\x1f\x52\x4e\x50\xfb\xd5\x8f\x83\x7f\x5a\xf9\xf1\x50\x67\x2c\x4e\x6e\xc2\x06\x31\x66\x79\xd8\xf7\x32\x79\x67\x93\xff\x3b\x6c\xfe\x0b\x00\x00\xff\xff\xc5\xda\x04\xfe\x30\x45\x00\x00")

func v1alphaTrackerTrackerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaTrackerTrackerSwaggerJson,
		"v1alpha/tracker/tracker.swagger.json",
	)
}

func v1alphaTrackerTrackerSwaggerJson() (*asset, error) {
	bytes, err := v1alphaTrackerTrackerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/tracker/tracker.swagger.json", size: 17712, mode: os.FileMode(420), modTime: time.Unix(1591653647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaExtractorExtractorSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x08\xee\x1e\x17\x71\x36\x7b\xcb\x2d\xc8\xa6\x40\x0f\x01\x82\x02\x3d\x15\x41\xc0\x90\x23\x99\x81\x44\x32\x33\xc3\x34\x6e\xe1\x7f\x2f\xc8\xc8\xb1\xa4\x58\x89\x2d\xb5\x75\x0b\x54\x27\x4a\xe4\x3c\xce\x1b\xbe\x99\xa1\xbe\xce\x84\x90\xf4\x59\x95\x25\xa0\x3c\x15\xf2\xe4\xe8\x58\xfe\x93\xbe\x59\x57\x78\x79\x2a\xd2\xbc\x10\x92\x2d\x57\x90\xe6\x1f\xfe\x55\x55\x58\xa8\x39\x3c\x32\x2a\xcd\x1e\x37\xa3\xa3\x80\x9e\x7d\xb6\x16\x42\x3e\x00\x92\xf5\x2e\xdb\x3c\x0d\x85\xf3\x2c\x08\x58\xce\x84\x58\xe5\x3d\xb4\x77\x14\x6b\x20\x79\x2a\x3e\x3d\x59\xa9\x10\x2a\xab\x15\x5b\xef\xe6\x77\xe4\x5d\x5a\x7b\x9d\xd7\x06\xf4\x26\xea\x1d\xd7\x2a\x5e\xd0\xc6\xf9\xf9\xda\x69\x03\x01\x9c\x01\xa7\x2d\xd0\xda\xef\xe7\x65\xc9\xce\x53\xfb\x5d\x08\xe9\x03\x60\xde\xe1\xbd\x49\x4c\xfe\x5f\x03\x2c\x2f\xd6\xac\x6f\x9a\x51\xc3\x3b\x5b\x21\x50\xf0\x8e\x80\x3a\x60\x42\xc8\x93\xe3\xe3\xde\x27\x21\xa4\x01\xd2\x68\x03\x37\xd1\x3a\x13\x14\xb5\x06\xa2\x22\x56\x62\x8d\x74\xd4\x82\xcf\x46\xa4\x17\x50\xab\x17\x60\x42\xc8\xbf\x11\x8a\x84\xf3\xd7\xdc\x40\x61\x9d\x4d\xb8\xb4\x39\xa5\xc6\xdd\x0f\x0d\xb0\xec\x98\xaf\x5a\x6f\xab\xf6\x8e\xd2\x40\xa1\x62\xc5\x6f\x7b\xef\x44\x74\xf0\x18\x40\x33\x18\x01\x88\x1e\x9f\x49\x4c\xe5\x80\xd1\xb1\xad\xe1\x22\x81\xbe\xe2\xf7\x6c\x0b\x03\x19\x14\xaa\x1a\x18\x70\x23\xa0\xa7\xa7\x47\xc7\xa9\x3a\xeb\xfc\xd6\x9b\x65\xdf\x5f\xeb\x86\x66\x10\xee\xa3\x45\x48\x1a\x61\x8c\xf0\xdd\xcf\xea\x3e\x02\xf1\x2e\x94\xaf\x5b\x94\x59\x95\x7d\xb2\xdb\x04\xbc\x81\xbd\x9e\xb5\xe1\x9a\xe8\x0d\x64\x4f\xad\x58\x2f\x26\xe7\xce\x65\x46\xf9\x4d\x32\x27\x3b\xfb\x27\x6f\x9a\xe7\x57\xce\x9b\xe6\xa4\x0e\x92\x35\xcf\xcd\xad\xe5\xd9\xa6\x15\x19\x08\xb4\x41\x6b\xe7\x0f\x2f\x43\x0e\xa0\xbf\xbd\x83\x56\x37\x49\x7d\x2f\x00\xb2\xed\xa5\x84\xf4\x58\x2a\x67\xbf\xa8\x46\x40\x9d\x64\x59\x63\x11\xa3\x75\xa5\xdc\x7a\xb0\xb5\x37\x31\xb7\xf4\xbd\x2d\x9b\x76\x7e\xee\x1d\x31\x2a\xeb\xfa\xe2\xde\x09\x84\xb4\x0f\x2f\xb3\x7c\x6d\xa9\x10\x55\x57\x2c\xd2\x32\xd4\xfd\xf5\xaf\xec\xd5\xd1\xf3\xd6\xba\xd6\x3d\x8a\x4b\xe5\x54\x09\x35\x38\x7e\x67\x3b\x61\xd9\xfb\x60\x2a\xe5\xca\xa8\xca\x51\xa1\xa5\x25\x31\xd4\xa3\x2c\x7d\x44\x0d\x1f\xb1\x1a\x63\x7c\x70\x2d\x8d\x31\x6d\xb7\xa3\xe9\x3a\xda\x5e\x51\x7a\xe9\xba\x87\xba\x86\x7a\xf8\x04\x61\x11\xa4\x62\x9c\x6a\xcf\x88\x68\x15\xb6\x82\x73\xef\x18\x1c\x0f\x46\xab\xe7\x48\x9e\x53\xc6\xe4\x58\xa8\xea\x6a\xbb\x5b\xaf\x7a\x30\xd4\x55\xe2\x1e\x3a\xdd\x31\xbc\x4d\xab\x9c\x10\xdf\xba\x53\x02\x7e\x92\xa6\x7a\x75\x67\x8c\xc2\x3a\xdd\xee\x50\xfa\xea\xfe\x72\x8d\x0e\xd9\xf8\x72\x3e\x70\x4d\x9b\xa4\x07\xd6\x0b\x30\x57\x87\x66\x96\x7f\xab\x6f\x63\x71\xe6\x26\x5d\x18\xd2\xfa\x9b\x7d\x12\xaf\x5d\xa6\x55\x15\xdf\xaa\xef\x9d\x20\x14\x1e\x6b\xc5\xf9\xda\xb7\x64\x78\x2b\x9b\x3b\x17\xd4\x09\x14\xa1\x07\xb0\x33\x3f\xed\xcd\x20\x3d\xeb\x18\x4a\xc0\x21\x7e\xd6\xf1\x7f\x27\x03\x6d\x11\x88\x46\x5e\x04\x0c\xb0\xb2\xd5\x0f\xab\x41\x6d\x49\xed\xa2\xc4\x74\xa9\x9d\xad\x66\xdf\x02\x00\x00\xff\xff\xf2\x42\x83\x32\x2d\x12\x00\x00")

func v1alphaExtractorExtractorSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaExtractorExtractorSwaggerJson,
		"v1alpha/extractor/extractor.swagger.json",
	)
}

func v1alphaExtractorExtractorSwaggerJson() (*asset, error) {
	bytes, err := v1alphaExtractorExtractorSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/extractor/extractor.swagger.json", size: 4653, mode: os.FileMode(420), modTime: time.Unix(1591653647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaSchemaSchemaSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\x83\x30\x10\x44\xef\x7c\xc5\xca\xed\x31\x0a\x6d\x7a\xcb\xad\x87\x7e\x45\x55\x55\x0e\x2c\x64\x23\xb0\xad\xdd\x25\x15\x8a\xf8\xf7\xca\x90\x26\x4e\x14\x94\x48\x3d\x19\x79\xde\x8c\x3d\xb0\x1c\x32\x00\x23\x3f\xb6\xae\x91\xcd\x1a\xcc\x6a\xf9\x62\x16\x71\x8f\x5c\xe5\xcd\x1a\xa2\x0e\x60\x94\xb4\xc1\xa8\xef\x5f\x6d\x13\xb6\x36\x97\x62\x8b\xed\xdf\xb2\x0c\xec\xd5\x8f\x3e\x00\xb3\x47\x16\xf2\x6e\xa4\xa7\x47\x70\x5e\x41\x50\x4d\x06\x30\x8c\xe9\x85\x77\xd2\xb5\x28\x66\x0d\x9f\x93\xcb\x86\xd0\x50\x61\x95\xbc\xcb\x77\xe2\x5d\x64\xbf\x46\x36\xb0\x2f\xbb\xe2\x41\xd6\xea\x36\x82\x87\xe9\x98\x12\x2b\x72\x14\x39\x39\x77\x19\x2f\xbb\xe9\xaa\x77\xd7\x9f\x36\x63\xc5\x3e\x8c\x0d\xfd\x66\x87\x85\x1e\xcb\x4c\x78\x40\x56\x42\x49\xe8\x23\xff\xdd\x71\x73\xb1\x9b\xe4\x88\x32\xb9\xda\x9c\xa4\x61\x71\xf6\xee\x6d\xd3\xe1\x1d\xe3\x22\xd5\x2a\xcf\xad\xd5\xa8\x6e\x7a\xc5\x24\x34\x4b\xd7\xe3\x11\x86\x3b\xa7\xd4\xe2\x07\xb3\xe7\xff\x54\xc4\xab\x80\x87\xfb\x15\xbe\x9c\xad\x47\x4e\x31\x0e\xdb\x4c\x3f\x72\xfa\xb6\xba\x9d\xda\xa2\x88\xad\xef\xbd\xb7\x9b\xd6\x12\xd5\x52\x23\x73\x56\xcb\x6c\xfb\xcb\x1b\x91\x62\x7b\xcd\x03\x98\x67\xc6\x2a\x3a\x9e\xf2\x64\xb6\xf2\x74\xa4\x12\x7e\x98\xfb\x4e\xf1\x3f\xc8\x86\xec\x37\x00\x00\xff\xff\xa3\xf5\xe5\x23\x7d\x03\x00\x00")

func v1alphaSchemaSchemaSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaSchemaSchemaSwaggerJson,
		"v1alpha/schema/schema.swagger.json",
	)
}

func v1alphaSchemaSchemaSwaggerJson() (*asset, error) {
	bytes, err := v1alphaSchemaSchemaSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/schema/schema.swagger.json", size: 893, mode: os.FileMode(420), modTime: time.Unix(1591653647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaDepsDepsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x8e\xa3\x30\x10\x44\xef\x7c\x45\xcb\xbb\xc7\x28\xec\x66\x6f\xb9\xed\x61\xbe\x62\x34\x1a\x39\xd0\x90\x8e\xc0\xb6\xba\x9b\x8c\x50\xc4\xbf\x8f\x6c\xa2\xc4\x89\x82\x12\x69\x2e\x80\x5c\xaf\xca\x2e\x68\x4e\x05\x80\x91\x2f\xdb\xb6\xc8\x66\x0b\x66\xb3\xfe\x63\x56\x71\x8d\x5c\xe3\xcd\x16\xa2\x0e\x60\x94\xb4\xc3\xa8\x1f\xff\xda\x2e\xec\x6d\x59\x63\x90\x74\x59\x07\xf6\xea\x93\x07\xc0\x1c\x91\x85\xbc\x4b\xe4\xfc\x08\xce\x2b\x08\xaa\x29\x00\xa6\x94\x5c\x79\x27\x43\x8f\x62\xb6\xf0\x3e\xbb\x6c\x08\x1d\x55\x56\xc9\xbb\xf2\x20\xde\x45\xf6\x23\xb1\x81\x7d\x3d\x54\x2f\xb2\x56\xf7\x11\x3c\xcd\xdb\xd4\xd8\x90\xa3\xc8\xc9\xb5\x47\x3a\xec\x6e\x68\xfe\xbb\xf1\xb2\x18\xeb\x8d\x21\xb5\xf3\xbb\x03\x56\x7a\x2e\x33\xe3\x01\x59\x09\x25\xa3\xcf\xfc\xe7\xc0\xdd\xcd\x6a\x96\x23\xca\xe4\x5a\x73\x91\xa6\xd5\xd5\x7b\xb4\xdd\x80\x4f\x8c\xab\x5c\x6b\x3c\xf7\x56\xa3\xba\x1b\x15\xb3\xd0\x22\xbf\x9f\xb7\x30\x3c\x38\xa5\x1e\xdf\x98\x3d\xff\xa4\x22\xde\x05\xbc\xdc\xaf\xf2\xf5\x62\x3d\x72\x8a\x71\xd0\x16\xfa\x91\xd3\x7f\x9b\xc7\xa9\x3d\x8a\xd8\xf6\xd9\x7b\x7b\x68\xad\x51\x2d\x75\xb2\x64\xb5\xcc\x76\xbc\x3d\x11\x29\xf6\xf7\x3c\x80\xf9\xcd\xd8\x44\xc7\xaf\x32\x9b\xad\x32\x1f\xa9\x8c\x9f\x96\xbe\x53\xfc\x0f\x8a\xa9\xf8\x0e\x00\x00\xff\xff\x21\xa2\x04\x5f\x79\x03\x00\x00")

func v1alphaDepsDepsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaDepsDepsSwaggerJson,
		"v1alpha/deps/deps.swagger.json",
	)
}

func v1alphaDepsDepsSwaggerJson() (*asset, error) {
	bytes, err := v1alphaDepsDepsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/deps/deps.swagger.json", size: 889, mode: os.FileMode(420), modTime: time.Unix(1591653647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaStoreStoreSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x04\x6d\xc7\xa0\x59\xd3\x5b\x6e\x05\xda\x0d\x1b\x86\xad\xe8\x06\xec\x30\x14\x83\x62\xd3\x0e\x3b\x5b\x12\x28\x3a\x43\x50\xf8\xdf\x07\xc9\x89\xab\xa6\x76\xe3\x20\xc9\x25\x09\xc4\xf7\x1e\xf9\x44\x8a\x79\x4a\x84\x90\xee\x9f\x2a\x0a\x20\x39\x17\x72\x76\xf1\x41\x4e\xfc\x19\xea\xdc\xc8\xb9\xf0\x71\x21\x24\x23\x97\xe0\xe3\xab\x4b\x55\xda\xa5\x9a\x3a\x36\x04\xed\xe7\x85\x25\xc3\x26\xb0\x84\x90\x2b\x20\x87\x46\x07\x6c\xfb\x53\x68\xc3\xc2\x01\xcb\x44\x88\x26\x68\xa7\x46\xbb\xba\x02\x27\xe7\xe2\x77\xcb\x52\xd6\x96\x98\x2a\x46\xa3\xa7\x8f\xce\x68\x8f\x7d\x08\x58\x4b\x26\xab\xd3\x91\x58\xc5\x4b\x0f\x7c\x6a\xd3\x64\x90\xa3\x46\x8f\x73\xcf\x4e\x42\xb1\x8b\x3a\xbf\xd6\xeb\xee\xd0\x1b\x5c\xdb\xe0\xcf\x2c\x1e\x21\xe5\x8d\x99\x16\x6e\x81\x18\xc1\x45\xe8\x0d\xfe\x4f\x4d\xe5\x8b\xd3\x48\xc7\x31\xa1\x2e\x64\x17\x6a\x26\xcf\xdc\x95\x2a\x6b\xd8\x43\x9c\xc4\xb1\xdc\x50\xa5\xd8\x47\x17\x6b\x86\x48\x34\x89\xbf\x37\x29\x24\xd5\x9a\xb1\x82\x5b\x22\x43\xc7\x58\x84\x1d\x81\xd1\xfe\x52\x93\x0d\xda\x43\xcd\xe0\x47\x6d\xc0\x1f\x6a\xbe\x9a\xf5\xab\x56\xe0\x9c\x2a\xf6\xdd\x5b\x2f\x35\x03\x56\x58\xba\x21\xaa\x22\x52\xeb\x97\x15\x21\x43\xb5\x8b\x17\x42\xbe\x27\xc8\x3d\xe3\xdd\x34\x9a\xad\x69\x3c\x52\x11\xbe\xd9\xd3\xa7\xf0\x78\x6e\xa0\x04\x86\x7b\x70\xd6\x68\x07\x6f\xb4\xeb\x35\xf5\x23\xea\x6c\x04\x71\x6f\x9f\xad\x42\x3a\xdb\xdd\x84\x4a\x3f\x91\xb2\xcb\xcf\x0c\xd5\x9d\x42\x3a\xf8\x8a\x3a\xf6\x31\x26\x8b\xad\xc8\xcf\x96\x78\xf0\x0c\xfd\xbd\x3c\xc9\x8b\x8d\x15\x67\x27\x57\xbc\x3a\xb5\x22\xe8\xd4\x64\x9e\xb9\xa3\x3b\xa6\xd9\xb7\x5b\x6e\xaf\x72\xd7\x90\x1b\xc5\xea\x7c\xcb\x70\xa0\xa4\x9e\x49\xda\xc9\x25\x41\xd7\x55\xf7\xa7\x13\x4e\xee\xaf\x7f\x45\xa5\xc8\x2f\x3f\xbe\x7f\xdb\xa6\x7f\xe8\x68\x19\xe4\xaa\x2e\x43\x7d\x1e\xff\x46\x31\xe1\x31\x1c\xb3\x9f\xb3\xd7\xdb\x70\x4c\x5f\xfa\xfb\xa1\x7b\x96\xf6\x81\x6a\xc3\x0d\xf8\x8a\x8e\x4f\xb1\xaa\xfa\x56\xcf\x99\x56\xd5\xc1\x6b\xea\xae\x1e\x63\x31\xd9\xb2\x9b\xa4\x49\xfe\x07\x00\x00\xff\xff\x5c\x42\x73\xa4\x7d\x09\x00\x00")

func v1alphaStoreStoreSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaStoreStoreSwaggerJson,
		"v1alpha/store/store.swagger.json",
	)
}

func v1alphaStoreStoreSwaggerJson() (*asset, error) {
	bytes, err := v1alphaStoreStoreSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/store/store.swagger.json", size: 2429, mode: os.FileMode(420), modTime: time.Unix(1591653648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"v1alpha/tracker/tracker.swagger.json":     v1alphaTrackerTrackerSwaggerJson,
	"v1alpha/extractor/extractor.swagger.json": v1alphaExtractorExtractorSwaggerJson,
	"v1alpha/schema/schema.swagger.json":       v1alphaSchemaSchemaSwaggerJson,
	"v1alpha/deps/deps.swagger.json":           v1alphaDepsDepsSwaggerJson,
	"v1alpha/store/store.swagger.json":         v1alphaStoreStoreSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"v1alpha": &bintree{nil, map[string]*bintree{
		"deps": &bintree{nil, map[string]*bintree{
			"deps.swagger.json": &bintree{v1alphaDepsDepsSwaggerJson, map[string]*bintree{}},
		}},
		"extractor": &bintree{nil, map[string]*bintree{
			"extractor.swagger.json": &bintree{v1alphaExtractorExtractorSwaggerJson, map[string]*bintree{}},
		}},
		"schema": &bintree{nil, map[string]*bintree{
			"schema.swagger.json": &bintree{v1alphaSchemaSchemaSwaggerJson, map[string]*bintree{}},
		}},
		"store": &bintree{nil, map[string]*bintree{
			"store.swagger.json": &bintree{v1alphaStoreStoreSwaggerJson, map[string]*bintree{}},
		}},
		"tracker": &bintree{nil, map[string]*bintree{
			"tracker.swagger.json": &bintree{v1alphaTrackerTrackerSwaggerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
