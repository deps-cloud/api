// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package extractor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DependencyExtractorClient is the client API for DependencyExtractor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DependencyExtractorClient interface {
	Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error)
}

type dependencyExtractorClient struct {
	cc grpc.ClientConnInterface
}

func NewDependencyExtractorClient(cc grpc.ClientConnInterface) DependencyExtractorClient {
	return &dependencyExtractorClient{cc}
}

func (c *dependencyExtractorClient) Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.extractor.DependencyExtractor/Match", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyExtractorClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error) {
	out := new(ExtractResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.extractor.DependencyExtractor/Extract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DependencyExtractorServer is the server API for DependencyExtractor service.
// All implementations must embed UnimplementedDependencyExtractorServer
// for forward compatibility
type DependencyExtractorServer interface {
	Match(context.Context, *MatchRequest) (*MatchResponse, error)
	Extract(context.Context, *ExtractRequest) (*ExtractResponse, error)
	mustEmbedUnimplementedDependencyExtractorServer()
}

// UnimplementedDependencyExtractorServer must be embedded to have forward compatible implementations.
type UnimplementedDependencyExtractorServer struct {
}

func (UnimplementedDependencyExtractorServer) Match(context.Context, *MatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (UnimplementedDependencyExtractorServer) Extract(context.Context, *ExtractRequest) (*ExtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedDependencyExtractorServer) mustEmbedUnimplementedDependencyExtractorServer() {}

// UnsafeDependencyExtractorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DependencyExtractorServer will
// result in compilation errors.
type UnsafeDependencyExtractorServer interface {
	mustEmbedUnimplementedDependencyExtractorServer()
}

func RegisterDependencyExtractorServer(s grpc.ServiceRegistrar, srv DependencyExtractorServer) {
	s.RegisterService(&DependencyExtractor_ServiceDesc, srv)
}

func _DependencyExtractor_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyExtractorServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.extractor.DependencyExtractor/Match",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyExtractorServer).Match(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyExtractor_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyExtractorServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.extractor.DependencyExtractor/Extract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyExtractorServer).Extract(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DependencyExtractor_ServiceDesc is the grpc.ServiceDesc for DependencyExtractor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DependencyExtractor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.deps.api.v1alpha.extractor.DependencyExtractor",
	HandlerType: (*DependencyExtractorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Match",
			Handler:    _DependencyExtractor_Match_Handler,
		},
		{
			MethodName: "Extract",
			Handler:    _DependencyExtractor_Extract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "depscloud_api/v1alpha/extractor/extractor.proto",
}
