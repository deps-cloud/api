// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphStoreClient is the client API for GraphStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphStoreClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	FindUpstream(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	FindDownstream(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
}

type graphStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphStoreClient(cc grpc.ClientConnInterface) GraphStoreClient {
	return &graphStoreClient{cc}
}

func (c *graphStoreClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.store.GraphStore/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphStoreClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.store.GraphStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphStoreClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.store.GraphStore/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphStoreClient) FindUpstream(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.store.GraphStore/FindUpstream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphStoreClient) FindDownstream(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.store.GraphStore/FindDownstream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphStoreServer is the server API for GraphStore service.
// All implementations must embed UnimplementedGraphStoreServer
// for forward compatibility
type GraphStoreServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	FindUpstream(context.Context, *FindRequest) (*FindResponse, error)
	FindDownstream(context.Context, *FindRequest) (*FindResponse, error)
	mustEmbedUnimplementedGraphStoreServer()
}

// UnimplementedGraphStoreServer must be embedded to have forward compatible implementations.
type UnimplementedGraphStoreServer struct {
}

func (UnimplementedGraphStoreServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedGraphStoreServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGraphStoreServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGraphStoreServer) FindUpstream(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUpstream not implemented")
}
func (UnimplementedGraphStoreServer) FindDownstream(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDownstream not implemented")
}
func (UnimplementedGraphStoreServer) mustEmbedUnimplementedGraphStoreServer() {}

// UnsafeGraphStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphStoreServer will
// result in compilation errors.
type UnsafeGraphStoreServer interface {
	mustEmbedUnimplementedGraphStoreServer()
}

func RegisterGraphStoreServer(s grpc.ServiceRegistrar, srv GraphStoreServer) {
	s.RegisterService(&GraphStore_ServiceDesc, srv)
}

func _GraphStore_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.store.GraphStore/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.store.GraphStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphStore_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.store.GraphStore/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphStore_FindUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).FindUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.store.GraphStore/FindUpstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).FindUpstream(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphStore_FindDownstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphStoreServer).FindDownstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.store.GraphStore/FindDownstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphStoreServer).FindDownstream(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphStore_ServiceDesc is the grpc.ServiceDesc for GraphStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.deps.api.v1alpha.store.GraphStore",
	HandlerType: (*GraphStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _GraphStore_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GraphStore_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GraphStore_List_Handler,
		},
		{
			MethodName: "FindUpstream",
			Handler:    _GraphStore_FindUpstream_Handler,
		},
		{
			MethodName: "FindDownstream",
			Handler:    _GraphStore_FindDownstream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "depscloud_api/v1alpha/store/store.proto",
}
