# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from depscloud.api.v1beta import manifest_pb2 as depscloud_dot_api_dot_v1beta_dot_manifest__pb2


class ManifestExtractionServiceStub(object):
    """ManifestService encapsulates operations around manifest files.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Match = channel.unary_unary(
                '/depscloud.api.v1beta.ManifestExtractionService/Match',
                request_serializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.MatchRequest.SerializeToString,
                response_deserializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.MatchResponse.FromString,
                )
        self.Extract = channel.unary_unary(
                '/depscloud.api.v1beta.ManifestExtractionService/Extract',
                request_serializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.ExtractRequest.SerializeToString,
                response_deserializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.ExtractResponse.FromString,
                )


class ManifestExtractionServiceServicer(object):
    """ManifestService encapsulates operations around manifest files.
    """

    def Match(self, request, context):
        """Match matches files that we support extracting content from.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Extract(self, request, context):
        """Extract parses supplied files and returns standard representations of manifests.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManifestExtractionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Match': grpc.unary_unary_rpc_method_handler(
                    servicer.Match,
                    request_deserializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.MatchRequest.FromString,
                    response_serializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.MatchResponse.SerializeToString,
            ),
            'Extract': grpc.unary_unary_rpc_method_handler(
                    servicer.Extract,
                    request_deserializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.ExtractRequest.FromString,
                    response_serializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.ExtractResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'depscloud.api.v1beta.ManifestExtractionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManifestExtractionService(object):
    """ManifestService encapsulates operations around manifest files.
    """

    @staticmethod
    def Match(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/depscloud.api.v1beta.ManifestExtractionService/Match',
            depscloud_dot_api_dot_v1beta_dot_manifest__pb2.MatchRequest.SerializeToString,
            depscloud_dot_api_dot_v1beta_dot_manifest__pb2.MatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Extract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/depscloud.api.v1beta.ManifestExtractionService/Extract',
            depscloud_dot_api_dot_v1beta_dot_manifest__pb2.ExtractRequest.SerializeToString,
            depscloud_dot_api_dot_v1beta_dot_manifest__pb2.ExtractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ManifestStorageServiceStub(object):
    """ManifestStorageService encapsulates logic around storing manifest files.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Store = channel.unary_unary(
                '/depscloud.api.v1beta.ManifestStorageService/Store',
                request_serializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.StoreRequest.SerializeToString,
                response_deserializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.StoreResponse.FromString,
                )


class ManifestStorageServiceServicer(object):
    """ManifestStorageService encapsulates logic around storing manifest files.
    """

    def Store(self, request, context):
        """Store accepts information about discovered manifest files and persists them.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManifestStorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.StoreRequest.FromString,
                    response_serializer=depscloud_dot_api_dot_v1beta_dot_manifest__pb2.StoreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'depscloud.api.v1beta.ManifestStorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManifestStorageService(object):
    """ManifestStorageService encapsulates logic around storing manifest files.
    """

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/depscloud.api.v1beta.ManifestStorageService/Store',
            depscloud_dot_api_dot_v1beta_dot_manifest__pb2.StoreRequest.SerializeToString,
            depscloud_dot_api_dot_v1beta_dot_manifest__pb2.StoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
