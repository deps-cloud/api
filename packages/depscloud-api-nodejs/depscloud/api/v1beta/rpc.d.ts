// Code generated by protoc-gen-dts. DO NOT EDIT.
// source: depscloud/api/v1beta/rpc.proto

import {
  ChannelCredentials, 
  Client, 
  ClientUnaryCall,
  ClientReadableStream,
  ClientWritableStream,
  ClientDuplexStream,
  Metadata,
  ServerUnaryCall,
  ServerReadableStream,
  ServerWritableStream,
  ServerDuplexStream,
  ServiceDefinition,
} from "@grpc/grpc-js";

import {
  Module,
  ModuleDependency,
  Source,
  SourceModule,
} from "./core";

export interface ListRequest {
  parent: string;
  pageSize: number;
  pageToken: string;
}

export interface ListSourcesResponse {
  nextPageToken: string;
  sources: Array<Source>;
}

export interface ListModulesResponse {
  nextPageToken: string;
  modules: Array<Module>;
}

export interface ManagedModule {
  module: Module;
  edgeData: Array<SourceModule>;
}

export interface ManagedSource {
  source: Source;
  edgeData: Array<SourceModule>;
}

export interface ListManagedSourcesResponse {
  sources: Array<ManagedSource>;
}

export interface ListManagedModulesResponse {
  modules: Array<ManagedModule>;
}

export interface Dependency {
  module: Module;
  edgeData: Array<ModuleDependency>;
}

export interface DependentsResponse {
  dependents: Array<Dependency>;
}

export interface DependenciesResponse {
  dependencies: Array<Dependency>;
}

export interface SearchRequest {
  cancel: boolean;
  modulesFor: ManagedSource;
  dependenciesFor: Dependency;
  dependentsOf: Dependency;
  sourcesOf: ManagedModule;
}

export interface SearchResponse {
  request: SearchRequest;
  modules: Array<ManagedModule>;
  dependencies: Array<Dependency>;
  dependents: Array<Dependency>;
  sources: Array<ManagedSource>;
}

export interface ISourceService { 
  list(call: ServerUnaryCall<ListRequest, ListSourcesResponse>, callback: (error: Error, response: ListSourcesResponse) => void): void; 
  listModules(call: ServerUnaryCall<ManagedSource, ListManagedModulesResponse>, callback: (error: Error, response: ListManagedModulesResponse) => void): void;
}

export class SourceService extends Client {
  public static service: ServiceDefinition<ISourceService>;

  constructor(address: string, credentials: ChannelCredentials, options?: object); 
  public list(request: ListRequest, callback: (error: Error, response: ListSourcesResponse) => void): void;
  public list(request: ListRequest, metadata: Metadata, callback: (error: Error, response: ListSourcesResponse) => void): void; 
  public listModules(request: ManagedSource, callback: (error: Error, response: ListManagedModulesResponse) => void): void;
  public listModules(request: ManagedSource, metadata: Metadata, callback: (error: Error, response: ListManagedModulesResponse) => void): void;
}

export interface IModuleService { 
  list(call: ServerUnaryCall<ListRequest, ListModulesResponse>, callback: (error: Error, response: ListModulesResponse) => void): void; 
  listSources(call: ServerUnaryCall<ManagedModule, ListManagedSourcesResponse>, callback: (error: Error, response: ListManagedSourcesResponse) => void): void;
}

export class ModuleService extends Client {
  public static service: ServiceDefinition<IModuleService>;

  constructor(address: string, credentials: ChannelCredentials, options?: object); 
  public list(request: ListRequest, callback: (error: Error, response: ListModulesResponse) => void): void;
  public list(request: ListRequest, metadata: Metadata, callback: (error: Error, response: ListModulesResponse) => void): void; 
  public listSources(request: ManagedModule, callback: (error: Error, response: ListManagedSourcesResponse) => void): void;
  public listSources(request: ManagedModule, metadata: Metadata, callback: (error: Error, response: ListManagedSourcesResponse) => void): void;
}

export interface ITraversalService { 
  getDependents(call: ServerUnaryCall<Dependency, DependentsResponse>, callback: (error: Error, response: DependentsResponse) => void): void; 
  getDependencies(call: ServerUnaryCall<Dependency, DependenciesResponse>, callback: (error: Error, response: DependenciesResponse) => void): void;
  search(call: ServerDuplexStream<SearchRequest, SearchResponse>): void;
  breadthFirstSearch(call: ServerDuplexStream<SearchRequest, SearchResponse>): void;
  depthFirstSearch(call: ServerDuplexStream<SearchRequest, SearchResponse>): void;
}

export class TraversalService extends Client {
  public static service: ServiceDefinition<ITraversalService>;

  constructor(address: string, credentials: ChannelCredentials, options?: object); 
  public getDependents(request: Dependency, callback: (error: Error, response: DependentsResponse) => void): void;
  public getDependents(request: Dependency, metadata: Metadata, callback: (error: Error, response: DependentsResponse) => void): void; 
  public getDependencies(request: Dependency, callback: (error: Error, response: DependenciesResponse) => void): void;
  public getDependencies(request: Dependency, metadata: Metadata, callback: (error: Error, response: DependenciesResponse) => void): void;
  public search(): ClientDuplexStream<SearchRequest, SearchResponse>
  public search(metadata: Metadata): ClientDuplexStream<SearchRequest, SearchResponse>
  public breadthFirstSearch(): ClientDuplexStream<SearchRequest, SearchResponse>
  public breadthFirstSearch(metadata: Metadata): ClientDuplexStream<SearchRequest, SearchResponse>
  public depthFirstSearch(): ClientDuplexStream<SearchRequest, SearchResponse>
  public depthFirstSearch(metadata: Metadata): ClientDuplexStream<SearchRequest, SearchResponse>
}

